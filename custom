
--------------------------------------------------------------------------------------------------------------------------------------------


















local panelName = "alarms"
local ui = setupUI([[
Panel
  height: 19

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 130
    !text: tr('Alarme')

  Button
    id: alerts
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    color: orange
    font: verdana-11px-rounded
    text: Edite

]])
ui:setId(panelName)



g_ui.loadUIFromString([[
  
  
AlarmsWindow < MainWindow
  !text: tr('Alarme')
  font: verdana-11px-rounded
  color: green
  size: 300 300
  @onEscape: self:hide()

  BotSwitch
    id: playerAttack
    anchors.left: parent.left
    anchors.right: prev.left
    anchors.top: parent.top
    anchors.right: parent.horizontalCenter
    text-align: center
    margin-top: 0
    text: Guild
    !tooltip: tr('Alertar se algum jogador de guild aparecer na tela')


  BotSwitch
    id: playerAttack2
    anchors.left: prev.right
    margin-left: 4
    anchors.top: prev.top
    anchors.right: parent.right
    margin-top: 0
    text: Guild Rival
    !tooltip: tr('Alertar se algum jogador de guild rival aparecer na tela.')


  BotSwitch
    id: playerpk
    anchors.left: parent.left
    anchors.top: prev.bottom
    anchors.right: parent.right
    text-align: center
    margin-top: 4
    text: Jogador PK na tela
    !tooltip: tr('Alertar se algum jogador PK aparecer na sua tela.')



  BotSwitch
    id: playerDetected
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    anchors.top: prev.bottom
    margin-top: 4
    text-align: center
    text: Jogador na tela
    !tooltip: tr('Alertar se algum jogador aparecer na sua tela.')

  CheckBox
    id: playerDetectedLogout
    anchors.top: playerDetected.top
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    margin-top: 3
    margin-left: 4
    text: Deslogar
    !tooltip: tr('Deslogar se algum jogador aparecer na sua tela.')

  BotSwitch
    id: ignoreFriends
    anchors.left: parent.left
    anchors.top: playerDetected.bottom
    anchors.right: parent.right
    text-align: center
    margin-top: 4
    text: Ignorar Amigos
    !tooltip: tr('Ignorar Jogadores da lista de amigos.')

  HorizontalSeparator
    id: sepPlayer
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.top: prev.bottom
    margin-top: 4

  BotSwitch
    id: creatureDetected
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: sepPlayer.bottom
    margin-top: 4
    text-align: center
    text: Monstro na tela
    !tooltip: tr('Alertar se algum monstro aparecer na sua tela.')

  BotSwitch
    id: warnBoss
    anchors.left: parent.left
    anchors.top: prev.bottom
    anchors.right: parent.horizontalCenter
    text-align: center
    margin-top: 5
    text: Nome do monstro
    !tooltip: tr('Alertar se o nome do monstro que você colocou aparecer na sua tela.')

  BotTextEdit
    id: bossName
    anchors.left: prev.right
    margin-left: 4
    anchors.top: prev.top
    anchors.right: parent.right
    margin-top: 0
    height: 17
    font: terminus-10px

  HorizontalSeparator
    id: sepCreature
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.top: prev.bottom
    margin-top: 4

  BotSwitch
    id: healthBelow
    anchors.left: parent.left
    anchors.top: prev.bottom
    anchors.right: parent.horizontalCenter
    text-align: center
    margin-top: 4
    text: Vida < 50%

  HorizontalScrollBar
    id: healthValue
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: healthBelow.top
    margin-left: 3
    margin-top: 2
    minimum: 1
    maximum: 100
    step: 1

  BotSwitch
    id: manaBelow
    anchors.left: parent.left
    anchors.top: healthBelow.bottom
    anchors.right: parent.horizontalCenter
    text-align: center
    margin-top: 4
    text: Mana < 50%

  HorizontalScrollBar
    id: manaValue
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: manaBelow.top
    margin-left: 3
    margin-top: 2
    minimum: 1
    maximum: 100
    step: 1

  HorizontalSeparator
    id: sepMessages
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.top: prev.bottom
    margin-top: 4

  BotSwitch
    id: privateMessage
    anchors.left: parent.left
    anchors.top: prev.bottom
    anchors.right: parent.right
    text-align: center
    margin-top: 4
    text: Mensagem privada
    !tooltip: tr('Alertar se você receber alguma mensagem no privado.')

  BotSwitch
    id: warnMessage
    anchors.left: parent.left
    anchors.top: prev.bottom
    anchors.right: parent.horizontalCenter
    text-align: center
    margin-top: 5
    text: Loot
    !tooltip: tr('Alertar se o nome do loot que você colocou dropar do monstro.')

  BotTextEdit
    id: messageText
    anchors.left: prev.right
    margin-left: 4
    anchors.top: prev.top
    anchors.right: parent.right
    margin-top: 0
    height: 17
    font: terminus-10px

  Label
    id: luiz
    anchors.left: parent.left
    anchors.top: prev.bottom
    anchors.right: parent.right
    text-align: center
    margin-top: 25
    text: @war
    color: red
    font: verdana-11px-rounded
    !tooltip: tr('Alertar se você receber alguma mensagem no privado.')

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-top: 15
    margin-right: 5 

]])





if not storage[panelName] then
  storage[panelName] = {
    enabled = false,
    playerAttack = false,
    playerDetected = false,
    playerDetectedLogout = false,
    creatureDetected = false,
    healthBelow = false,
    healthValue = 40,
    manaBelow = false,
    manaValue = 50,
    playerpk = false,
    privateMessage = false,
    warnBoss = false,
    bossName = '[B]'
}
end



local config = storage[panelName]

ui.title:setOn(config.enabled)
ui.title.onClick = function(widget)
config.enabled = not config.enabled
widget:setOn(config.enabled)
end

-- new var's validation
config.messageText = config.messageText or ""
config.bossName = config.bossName or ""

rootWidget = g_ui.getRootWidget()
if rootWidget then
  alarmsWindow = UI.createWindow('AlarmsWindow', rootWidget)
  alarmsWindow:hide()

  alarmsWindow.closeButton.onClick = function(widget)
    alarmsWindow:hide()
  end

  alarmsWindow.playerAttack:setOn(config.playerAttack)
  alarmsWindow.playerAttack.onClick = function(widget)
    config.playerAttack = not config.playerAttack
    widget:setOn(config.playerAttack)
  end

  alarmsWindow.playerAttack2:setOn(config.playerAttack2)
  alarmsWindow.playerAttack2.onClick = function(widget)
    config.playerAttack2 = not config.playerAttack2
    widget:setOn(config.playerAttack2)
  end

  alarmsWindow.playerpk:setOn(config.playerpk)
  alarmsWindow.playerpk.onClick = function(widget)
    config.playerpk = not config.playerpk
    widget:setOn(config.playerpk)
  end

  alarmsWindow.playerDetected:setOn(config.playerDetected)
  alarmsWindow.playerDetected.onClick = function(widget)
    config.playerDetected = not config.playerDetected
    widget:setOn(config.playerDetected)
  end

  alarmsWindow.playerDetectedLogout:setChecked(config.playerDetectedLogout)
  alarmsWindow.playerDetectedLogout.onClick = function(widget)
    config.playerDetectedLogout = not config.playerDetectedLogout
    widget:setChecked(config.playerDetectedLogout)
  end

  alarmsWindow.creatureDetected:setOn(config.creatureDetected)
  alarmsWindow.creatureDetected.onClick = function(widget)
    config.creatureDetected = not config.creatureDetected
    widget:setOn(config.creatureDetected)
  end

  alarmsWindow.healthBelow:setOn(config.healthBelow)
  alarmsWindow.healthBelow.onClick = function(widget)
    config.healthBelow = not config.healthBelow
    widget:setOn(config.healthBelow)
  end

  alarmsWindow.healthValue.onValueChange = function(scroll, value)
    config.healthValue = value
    alarmsWindow.healthBelow:setText("Vida < " .. config.healthValue .. "%")  
  end
  alarmsWindow.healthValue:setValue(config.healthValue)

  alarmsWindow.manaBelow:setOn(config.manaBelow)
  alarmsWindow.manaBelow.onClick = function(widget)
    config.manaBelow = not config.manaBelow
    widget:setOn(config.manaBelow)
  end

  alarmsWindow.manaValue.onValueChange = function(scroll, value)
    config.manaValue = value
    alarmsWindow.manaBelow:setText("Mana < " .. config.manaValue .. "%")  
  end
  alarmsWindow.manaValue:setValue(config.manaValue)

  alarmsWindow.privateMessage:setOn(config.privateMessage)
  alarmsWindow.privateMessage.onClick = function(widget)
    config.privateMessage = not config.privateMessage
    widget:setOn(config.privateMessage)
  end

  alarmsWindow.ignoreFriends:setOn(config.ignoreFriends)
  alarmsWindow.ignoreFriends.onClick = function(widget)
    config.ignoreFriends = not config.ignoreFriends
    widget:setOn(config.ignoreFriends)
  end

  alarmsWindow.warnBoss:setOn(config.warnBoss)
  alarmsWindow.warnBoss.onClick = function(widget)
    config.warnBoss = not config.warnBoss
    widget:setOn(config.warnBoss)
  end

  alarmsWindow.bossName:setText(config.bossName)
  alarmsWindow.bossName.onTextChange = function(widget, text)
    config.bossName = text
  end

  alarmsWindow.warnMessage:setOn(config.warnMessage)
  alarmsWindow.warnMessage.onClick = function(widget)
    config.warnMessage = not config.warnMessage
    widget:setOn(config.warnMessage)
  end

  alarmsWindow.messageText:setText(config.messageText)
  alarmsWindow.messageText.onTextChange = function(widget, text)
    config.messageText = text
  end

  local pName = player:getName()
  onTextMessage(function(mode, text)
    if config.enabled and config.luiz and mode == 16 and string.match(text, "hitpoints due to an attack") and not string.match(text, "hitpoints due to an attack by a ") then
      playSound("/Som/pk.ogg")
      g_window.setTitle(pName .. " - Player Attacks!")
      return
    end

    if config.warnMessage and config.messageText:len() > 0 then
      text = text:lower()
      local parts = string.split(config.messageText, ",")
      for i=1,#parts do
        local part = parts[i]
        part = part:trim()
        part = part:lower()

        if text:find(part) then
          delay(1500)
          playSound(g_resources.fileExists("/Som/loot.ogg") and "/Som/loot.ogg" or "/Som/loot.ogg")
          g_window.setTitle(pName .. " - Loot: "..part)
          return
        end
      end
    end
  end)

  macro(100, function()
    if not config.enabled then
      return
    end
    local specs = getSpectators()
    if config.playerDetected then
      for _, spec in ipairs(specs) do
        if spec:isPlayer() and spec:getName() ~= name() then
          local specPos = spec:getPosition()
          if (not config.ignoreFriends or not isFriend(spec)) and math.max(math.abs(posx()-specPos.x), math.abs(posy()-specPos.y)) <= 8 then
            playSound("/Som/jogador.ogg")
            delay(1500)
            g_window.setTitle(pName .. " - Jogador na tela! "..spec:getName())
            if config.playerDetectedLogout then
              modules.game_interface.tryLogout(false)
            end
            return
          end
        end
      end
    end

    if config.creatureDetected then
      for _, spec in ipairs(specs) do
        if not spec:isPlayer() then
          local specPos = spec:getPosition()
          if math.max(math.abs(posx()-specPos.x), math.abs(posy()-specPos.y)) <= 8 then
            playSound("/Som/monstro.ogg")
            delay(1500)
            g_window.setTitle(pName .. " - Monstro na tela! "..spec:getName())
            return
          end
        end
      end
    end

    if config.warnBoss then
      -- experimental, but since we check only names i think the best way would be to combine all spec's names into one string and then check it to avoid multiple loops
      if config.bossName:len() > 0 then
        local names = string.split(config.bossName, ",")
        local combinedString = ""
        for _, spec in ipairs(specs) do
          local specPos = spec:getPosition()
          if math.max(math.abs(posx() - specPos.x), math.abs(posy() - specPos.y)) <= 8 then
            local name = spec:getName():lower()
            -- add special sign between names to avoid unwanted combining mistakes
            combinedString = combinedString .."&"..name
          end
        end
        for i=1,#names do
          local name = names[i]
          name = name:trim()
          name = name:lower()

          if combinedString:find(name) then
            playSound(g_resources.fileExists("/Som/monstro.ogg") and "/Som/monstro.ogg" or "/Som/monstro.ogg")
            delay(1500)
            g_window.setTitle(pName .. " - Monstro na tela: "..name)
            return
          end

        end
      end
    end

    if config.healthBelow then
      if hppercent() <= config.healthValue then
        playSound("/Som/vida.ogg")
        delay(1500)
        g_window.setTitle(pName .. " - Vida baixa! only: "..hppercent().."%")
        return
      end
    end

    if config.manaBelow then
      if manapercent() <= config.manaValue then
        playSound("/Som/mana.ogg")
        delay(1500)
        g_window.setTitle(pName .. " - Mana baixa only: "..manapercent().."%")
        return
      end
    end
  end)

  onTalk(function(name, level, mode, text, channelId, pos)
    if mode == 4 and config.enabled and config.privateMessage then
      playSound("/Som/mensagem.ogg")
      g_window.setTitle(pName .. " - Mensagem de: " .. name)
      return
    end
  end)
end


macro(200, function()
    if not config.enabled then
      return
    end
if config.playerpk then
      for _, spec in ipairs(getSpectators()) do
        if spec:isPlayer() and spec:getSkull() ~= skull() then
          specPos = spec:getPosition()
          if (not config.ignoreFriends or not isFriend(spec)) and math.max(math.abs(posx()-specPos.x), math.abs(posy()-specPos.y)) <= 8 then
            playSound("/Som/pk.ogg")
            delay(1500)
            end
            return
          end
        end
end
end)

macro(200, function()
    if not config.enabled then
      return
    end
if config.playerAttack2 then
      for _, spec in ipairs(getSpectators()) do
        if spec:isPlayer() and spec:getEmblem(2) == 2 then
          specPos = spec:getPosition()
          if (not config.ignoreFriends or not isFriend(spec)) and math.max(math.abs(posx()-specPos.x), math.abs(posy()-specPos.y)) <= 8 then
            playSound("/Som/rival.ogg")
            delay(1500)
      return
            end
          end
        end
end
end)

macro(200, function()
    if not config.enabled then
      return
    end
if config.playerAttack then
      for _, spec in ipairs(getSpectators()) do
        if spec:isPlayer() and spec:getEmblem(3) == 3 then
          specPos = spec:getPosition()
          if (not config.ignoreFriends or not isFriend(spec)) and math.max(math.abs(posx()-specPos.x), math.abs(posy()-specPos.y)) <= 8 then
            playSound("/Som/guild.ogg")
            delay(1500)
      return
            end
          end
        end
end
end)

ui.alerts.onClick = function(widget)
  alarmsWindow:show()
  alarmsWindow:raise()
  alarmsWindow:focus()
end


UI.Separator()










------------------------------------------------------------------------








  local loadPanelName = "Jutsu"
  local ui = setupUI([[
Panel

  height: 20

  Button
    id: editJutsu
    color: yellow
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 20
    text: - Painel de magia  -
    tooltip: Abre painel de magias, configure no painel de configuracao


  ]], parent)






ui.editJutsu.onClick = function(widget)
say(storage.magiaatalho)
end UI.Separator()



  local loadPanelName = "Outfit"
  local ui = setupUI([[
Panel

  height: 20

  Button
    id: editOutfit
    color: yellow
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 20
    text: - Outfit  -
    tooltip: Mudar de roupa


  ]], parent)


ui.editOutfit.onClick = function(widget)
    g_game.requestOutfit()
    schedule(100, function()
        if modules.game_outfit.outfitWindow then
            modules.game_outfit.outfitWindow:hide()
            modules.game_outfit.randomize()
            schedule(1000, function()
                modules.game_outfit.accept()
            end)
        end
    end)
end 
UI.Separator()












  local loadPanelName = "Zoom"
  local ui = setupUI([[
Panel

  height: 20

  Button
    id: editZoom
    color: yellow
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 20
    text: - Zoom Map  -
    tooltip: Aproximar a tela


  ]], parent)


ui.editZoom.onClick = function(widget)
zoomIn()
end UI.Separator()

  local loadPanelName = "Zoom2"
  local ui = setupUI([[
Panel

  height: 20

  Button
    id: editZoom2
    color: yellow
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 20
    text: - Zoom Map  -
    tooltip: Afastar a tela


  ]], parent)


ui.editZoom2.onClick = function(widget)
zoomOut()
end UI.Separator()









local mkPanelname = "monsterKill"
if not storage[mkPanelname] then storage[mkPanelname] = { min = false } end

local monsterKill = setupUI([[
Panel
  margin-top:2
  height: 115
  Button
    id: resetList
    anchors.left: parent.left
    anchors.top: parent.top
    width: 20
    height: 17
    margin-top: 2
    margin-left: 3
    text: !
    color: red
    tooltip: Resetar os monstros
  Button
    id: showList
    anchors.right: parent.right
    anchors.top: parent.top
    width: 20
    height: 17
    margin-top: 2
    margin-right: 3
    text: -
    color: red
    tooltip: Minimizar  

  Label
    id: title
    text: Monstros Mortes
    color: pink
    font: verdana-11px-rounded 
    text-align: center
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 20

  ScrollablePanel
    id: content
    image-source: /images/ui/menubox
    image-border: 4
    image-border-top: 17
    anchors.top: showList.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 5
    height: 88
    padding: 3
    vertical-scrollbar: mkScroll
    layout:
      type: verticalBox

  BotSmallScrollBar
    id: mkScroll
    anchors.top: content.top
    anchors.bottom: content.bottom
    anchors.right: content.right
    margin-top: 2
    margin-bottom: 5
    margin-right: 5
  ]], parent)
monsterKill:setId(mkPanelname)

killList = {}
local lbls = {}

local function toggleWin(load)
  if load then
    monsterKill:setHeight(20)
    monsterKill.showList:setText("+")
    monsterKill.showList:setColor("green")
  else
    monsterKill:setHeight(115)
    monsterKill.showList:setText("-")
    monsterKill.showList:setColor("red")
  end
end

function refreshMK()
  if #lbls > 0 and (#killList == #lbls) then
    local i = 1
    for k, v in pairs(killList) do
      lbls[i].name:setText(k .. ':')
      lbls[i].count:setText("x"..v)
      i = i + 1
    end
  else
    for _, child in pairs(monsterKill.content:getChildren()) do
      child:destroy()
    end
    for k, v in pairs(killList) do
      lbls[k] = g_ui.loadUIFromString([[
Panel
  height: 16
  margin-left: 2

  Label
    id: name
    text:
    color: #00FFFF
    anchors.top: parent.top
    anchors.left: parent.left
    margin-top: 2
    text-auto-resize: true
    font: verdana-11px-rounded

  Label
    id: count
    text:
    anchors.top: name.top
    anchors.right: parent.right
    margin-right: 15
    text-auto-resize: true
    color: orange
    font: verdana-11px-rounded


]], monsterKill.content)


      if lbls[k] then
        lbls[k].name:setText(k .. ':')
        lbls[k].count:setText("x"..v)
      end
    end
  end
end
refreshMK()
toggleWin(storage[mkPanelname].min)

monsterKill.showList.onClick = function(widget)
  storage[mkPanelname].min = (monsterKill:getHeight() == 115)
  toggleWin(storage[mkPanelname].min)
end

monsterKill.resetList.onClick = function(widget)
  killList = {}
  refreshMK()
end

function checkKill(mode, text)
  local mobName = nil
  local reg = { "Loot of a (.*):", "Loot of an (.*):", "Loot of the (.*):","Loot of (.*):","Loot de an (.*):","Loot de (.*):"}
  for x = 1, #reg do
    _, _, mobName = string.find(text, reg[x])
    if mobName then
      if killList[mobName] then
        killList[mobName] = killList[mobName] + 1
      end
      refreshMK()
      break
    end
  end
end

onTalk(function(name, level, mode, text, channelId, pos)
  if channelId == 11 then checkKill(mode, text) end
end)

onTextMessage(function(mode, text)
  checkKill(mode, text)
end)

--- examples NOT NEEDED
function getKills(mobName)
  -- example: warn(getKills("Troll"))
  if killList[mobName] then
    return killList[mobName]
  end
  return nil
end

function getDumpAllKills() -- test dump
  for k, v in pairs(killList) do
    warn(v .. "x " .. k)
  end
end UI.Separator()


-----------------------------------------------------------------------------------------------------------------




UI.Separator()
--Luiz


g_ui.loadUIFromString([[
menPanel < Panel
  margin: 5
  margin-bottom: 17
  layout:
    type: verticalBox

MensagemWindow < MainWindow
  !text: tr('- MENSAGEM -')
  font: verdana-11px-rounded
  color: pink
  size: 190 250
  @onEscape: self:hide()

  TabBar
    id: msgsTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 0


  Panel
    id: msgssImagem
    anchors.top: msgsTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-border: 9





  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5 

]])















 local msgtPanelName = "listt"
  local ui = setupUI([[
Panel

  height: 25

  Button
    id: editMsg
    color: red  
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 25
    text: - Mensagem Canal -

  ]], parent)
  ui:setId(msgtPanelName)

  if not storage[msgtPanelName] then
    storage[msgtPanelName] = { 

    }
  end

rootWidget = g_ui.getRootWidget()
if rootWidget then
    msgsWindow = UI.createWindow('MensagemWindow', rootWidget)
    msgsWindow:hide()
    TabBar5 = msgsWindow.msgsTabBar
    TabBar5:setContentWidget(msgsWindow.msgssImagem)
   for v = 1, 1 do





menPanel = g_ui.createWidget("menPanel") -- Creates Panel
menPanel:setId("panelButtons") -- sets ID

menPanel2 = g_ui.createWidget("menPanel") -- Creates Panel
menPanel2:setId("2") -- sets ID


TabBar5:addTab("Mensagem", menPanel)
        color= UI.Label("by: @war",menPanel)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(menPanel)



macro(60000, "Msg trade", function()
  local Trade = getChannelId("advertising")
  if not Trade then
    Trade = getChannelId("Trade")
  end
  if Trade and storage.autoTradeMessage:len() > 0 then    
    sayChannel(Trade, storage.autoTradeMessage)
  end
end,menPanel)
UI.TextEdit(storage.autoTradeMessage or "hi ", function(widget, text)    
  storage.autoTradeMessage = text
end,menPanel)

macro(60000, "Msg Help", function()
  local Help = getChannelId("advertising")
  if not Help then
    Help = getChannelId("Help")
  end
  if Help and storage.autoHelpMessage:len() > 0 then    
    sayChannel(Help, storage.autoHelpMessage)
  end
end,menPanel)
UI.TextEdit(storage.autoHelpMessage or "hi", function(widget, text)    
  storage.autoHelpMessage = text
end,menPanel)






TabBar5:addTab("Mensagem 2", menPanel2)
        color= UI.Label("by: @war",menPanel2)
                color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(menPanel2)


local afkMsg = false
addSwitch("afkMsg", "AFK Mensagem", function(widget)
    afkMsg = not afkMsg
    widget:setOn(afkMsg)
end,menPanel2)

onTalk(function(name, level, mode, text, channelId, pos) --quando receber uma pm vai responder com a mensagem escolhida abaixo
    if mode == 4 and afkMsg == true then
        g_game.talkPrivate(5, name, storage.afkMsg)
        delay(5000)
    end
end,menPanel2)
UI.TextEdit(storage.afkMsg or "MENSAGEM", function(widget, newText) -- campo de texto pra alterar a mensagem que vai ser a resposta (mude somente o texto)
storage.afkMsg = newText
end,menPanel2)




end
end


  msgsWindow.closeButton.onClick = function(widget)
    msgsWindow:hide()
  end


  
ui.editMsg.onClick = function(widget)
    msgsWindow:show()
    msgsWindow:raise()
    msgsWindow:focus()
  end

-----

function CaveBot.Conversation(...)
    local expressions = {...}
    local delay = storage.extras.talkDelay or 1000

    local talkDelay = 0
    for i, expr in ipairs(expressions) do
        schedule(talkDelay, function() NPC.say(expr) end)
        talkDelay = talkDelay + delay
    end
end

function CaveBot.OpenNpcTrade()
    return CaveBot.Conversation("hi", "trade")
end

function CaveBot.Travel(destination)
    return CaveBot.Conversation("hi", destination, "yes")
end

macro(200, function()
    if g_game.isAttacking() and g_game.getAttackinggCreature():isNpc() then
        CaveBot.Conversation("hi", "trade")
    end
end)


local keyUp = "="
local keyDown = "-"

-- script

local lockedLevel = pos().z

onPlayerPositionChange(function(newPos, oldPos)
    lockedLevel = pos().z
    modules.game_interface.getMapPanel():unlockVisibleFloor()
end)

onKeyPress(function(keys)
    if keys == keyDown then
        lockedLevel = lockedLevel + 1
        modules.game_interface.getMapPanel():lockVisibleFloor(lockedLevel)
    elseif keys == keyUp then
        lockedLevel = lockedLevel - 1
        modules.game_interface.getMapPanel():lockVisibleFloor(lockedLevel)
    end
end)

----------------------------------------------------------------------------- PAINEL SCRIPTS ---------------------------------------------------------------------------------

setDefaultTab("Hotkeys")



g_ui.loadUIFromString([[
ExtrasScrollBar < Panel
  height: 28
  margin-top: 3


  UIWidget
    id: text
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    
  HorizontalScrollBar
    id: scroll
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 3
    minimum: 0
    maximum: 10
    step: 1

ExtrasTextEdit < Panel
  height: 40
  margin-top: 7

  UIWidget
    id: text
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    
  TextEdit
    id: textEdit
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 5
    minimum: 0
    maximum: 10
    step: 1
    text-align: center


ExtrasItem < Panel
  height: 34
  margin-top: 7
  margin-left: 25
  margin-right: 25


  UIWidget
    id: text
    anchors.left: parent.left
    anchors.verticalCenter: next.verticalCenter

  BotItem
    id: item
    anchors.top: parent.top
    anchors.right: parent.right



ExtrasCheckBox < BotSwitch
  height: 20
  margin-top: 7

ExtrasWindow < MainWindow
  !text: tr('Scripts')
  font: verdana-11px-rounded
  color: green
  size: 460 360
  padding: 25
  @onEscape: self:hide()



  Label
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    anchors.top: parent.top
    text-align: center
    text: < PvP >
    font: verdana-11px-rounded
    color: pink

  Label
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    text: < Utilidades >
    font: verdana-11px-rounded
    color: pink



  VerticalScrollBar
    id: contentScroll
    anchors.top: prev.bottom
    margin-top: 3
    anchors.right: parent.right
    anchors.bottom: separator.top
    step: 28
    pixels-scroll: true
    margin-right: 190
    margin-top: 5
    margin-bottom: 5

  ScrollablePanel
    id: content
    anchors.top: prev.top
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: separator.top
    vertical-scrollbar: contentScroll
    margin-bottom: 10

      
    Panel
      id: left
      anchors.top: parent.top
      anchors.left: parent.left
      anchors.right: parent.horizontalCenter
      margin-top: 5
      margin-left: 10
      margin-right: 10
      layout:
        type: verticalBox
        fit-children: true
    focusable: false


    Panel
      id: right
      anchors.top: parent.top
      anchors.left: parent.horizontalCenter
      anchors.right: parent.right
      margin-top: 5
      margin-left: 30
      margin-right: 13
      layout:
        type: verticalBox
        fit-children: true
      focusable: false




  HorizontalSeparator
    id: separator
    height: 16
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8

  ResizeBorder
    id: bottomResizeBorder
    anchors.fill: separator
    height: 3
    minimum: 260
    maximum: 600
    margin-left: 3
    margin-right: 3
    background: #ffffff88   

  Label
    id: stopp
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-top: 16
    margin-right: 175
    font: verdana-11px-rounded
    text: @war
    color: #00FFFF
    !tooltip: tr('Use fones de ouvido para ter uma experiencia melhor.')  

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-right: 5
]])




local panelName = "extras"
local ui = setupUI([[
Panel

  height: 50

  Button
    id: editScripts
    color: pink
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 50
    text: - SCRIPTS -

  ]], parent)
  ui:setId(PanelName)


if not storage[panelName] then
  storage[panelName] = {
}
end

local settings = storage[panelName]


extrasWindow = UI.createWindow('ExtrasWindow', rootWidget)
extrasWindow:hide()

extrasWindow.closeButton.onClick = function(widget)
  extrasWindow:hide()
end


modules.game_interface.addMenuHook("category", "Musicas", function()
          extrasWindow:show()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)

extrasWindow.onGeometryChange = function(widget, old, new)
  if old.height == 0 then return end
  
  settings.height = new.height
end

extrasWindow:setHeight(settings.height or 360)


local rightPanel = extrasWindow.content.right
local leftPanel = extrasWindow.content.left



ui.editScripts.onClick = function(widget)
  extrasWindow:show()
  extrasWindow:raise()
  extrasWindow:focus()
end


modules.game_interface.addMenuHook("category", "Scripts",
  function()
          extrasWindow:show()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)


local addCheckBox = function(id, title, defaultValue, dest, tooltip)
  local widget = UI.createWidget('ExtrasCheckBox', dest)
  widget.onClick = function()
    widget:setOn(not widget:isOn())
    settings[id] = widget:isOn()
    if id == "checkPlayer" then
      local label = rootWidget.newHealer.targetSettings.vocations.title
      if not widget:isOn() then
        label:setColor("#d9321f")
        label:setTooltip("! WARNING ! \nTurn on check players in extras to use this feature!")
      else
          label:setColor("#dfdfdf")
          label:setTooltip("")
      end
    end
  end
  widget:setText(title)
  widget:setTooltip(tooltip)
  if settings[id] == nil then
    widget:setOn(defaultValue)
  else
    widget:setOn(settings[id])
  end
  settings[id] = widget:isOn()
end

local addItem = function(id, title, defaultItem, dest, tooltip)
  local widget = UI.createWidget('ExtrasItem', dest)
  widget.text:setText(title)
  widget.text:setColor("green")
  widget.text:setFont("verdana-11px-rounded")
  widget.text:setTooltip(tooltip)
  widget.item:setTooltip(tooltip)
  widget.item:setItemId(settings[id] or defaultItem)
  widget.item.onItemChange = function(widget)
    settings[id] = widget:getItemId()
  end
  settings[id] = settings[id] or defaultItem
end

local addTextEdit = function(id, title, defaultValue, dest, tooltip)
  local widget = UI.createWidget('ExtrasTextEdit', dest)
  widget.text:setText(title)
  widget.text:setColor("green")
  widget.text:setFont("verdana-11px-rounded")
  widget.textEdit:setText(settings[id] or defaultValue or "")
  widget.text:setTooltip(tooltip)
  widget.textEdit.onTextChange = function(widget,text)
    settings[id] = text
  end
  settings[id] = settings[id] or defaultValue or ""
end

local addScrollBar = function(id, title, min, max, defaultValue, dest, tooltip)
  local widget = UI.createWidget('ExtrasScrollBar', dest)
  widget.text:setTooltip(tooltip)
  widget.text:setColor("green")
  widget.text:setFont("verdana-11px-rounded")
  widget.scroll.onValueChange = function(scroll, value)
    widget.text:setText(title .. ": " .. value)
    if value == 0 then
      value = 1
    end
    settings[id] = value
  end
  widget.scroll:setRange(min, max)
  widget.scroll:setTooltip(tooltip)
  if max-min > 1000 then
    widget.scroll:setStep(100)
  elseif max-min > 100 then
    widget.scroll:setStep(10)
  end
  widget.scroll:setValue(settings[id] or defaultValue)
  widget.scroll.onValueChange(widget.scroll, widget.scroll:getValue())
end




UI.Separator()


addItem("kunai", "Kunai: ", 2475, leftPanel, "Arraste ou coloque o id da kunai para usar o dash kunai")


addCheckBox("dashkunai", "Dash Kunai", false, leftPanel, "Use a kunai enquanto voce corre")
if true then

function funcSuperDashUseWith(parent)
 if not parent then
    parent = panel
  end

  onKeyPress(function(keys)

    itemUseId = (settings.kunai)
    dashSQMs = 8
    dashSQMs2 = 6

    if not settings.dashkunai then
      return
    end
    consoleModule = modules.game_console
    if (keys == "W" and not consoleModule:isChatEnabled()) or keys == "Up" then
        schedule(50,function()
          moveToTile = g_map.getTile({x = posx(), y = posy()-dashSQMs2, z = posz()})
          if moveToTile then
           g_game.useInventoryItemWith(itemUseId, moveToTile:getTopThing())
          end
        end)
    elseif (keys == "A" and not consoleModule:isChatEnabled()) or keys == "Left" then
        schedule(50,function()
          moveToTile = g_map.getTile({x = posx()-dashSQMs, y = posy(), z = posz()})
          if moveToTile then
            g_game.useInventoryItemWith(itemUseId, moveToTile:getTopThing())
          end
        end)
    elseif (keys == "S" and not consoleModule:isChatEnabled()) or keys == "Down" then
        schedule(50,function()
          moveToTile = g_map.getTile({x = posx(), y = posy()+dashSQMs2, z = posz()})
          if moveToTile then
              g_game.useInventoryItemWith(itemUseId, moveToTile:getTopThing())
          end
        end)
    elseif (keys == "D" and not consoleModule:isChatEnabled()) or keys == "Right" then
        schedule(50,function()
          moveToTile = g_map.getTile({x = posx()+dashSQMs, y = posy(), z = posz()})
          if moveToTile then
              g_game.useInventoryItemWith(itemUseId, moveToTile:getTopThing())
          end
        end)
    end

  end)
end
funcSuperDashUseWith() local usingWASD = modules.game_walking.wsadWalking
end

UI.Separator(leftPanel)

UI.TextEdit(storage.stack or "Nome da magia", function(widget, text)   
  storage.stack = text
end,leftPanel)

addScrollBar("stackk", "Distancia do stack", 0, 10, 10, leftPanel, "defina a distancia do mostro para usar a magia.")

addCheckBox("stack", "Stack", false, leftPanel, "Ataca o monstro mais distante conforme sua direção, atalho CapsLock + wasd")
if true then
end

local Stack = {};

Stack.northPattern = [[
    11111
    11111
    11111
    11111
    11111
    11111
    11111
    11111
    00000
    00000
    00000
    00000
    00000
    00000
    00000
    00000
    00000
]];

Stack.southPattern = [[
    00000
    00000
    00000
    00000
    00000
    00000
    00000
    00000
    00000
    11111
    11111
    11111
    11111
    11111
    11111
    11111
    11111
]];

Stack.westPattern = [[
    1111111110000000000
    1111111110000000000
    1111111110000000000
    1111111110000000000
    1111111110000000000
]];

Stack.eastPattern = [[
    0000000000111111111
    0000000000111111111
    0000000000111111111
    0000000000111111111
    0000000000111111111
]];

local spell = (storage.stack)
local maxDistance = (settings.stackk)


macro(1, function() 
    local furthestMonster = nil;
    local pattern = nil;
    if settings.stack and (modules.corelib.g_keyboard.areKeysPressed("CapsLock+W")) then
        pattern = Stack.northPattern;
    elseif settings.stack and (modules.corelib.g_keyboard.areKeysPressed("CapsLock+S")) then
        pattern = Stack.southPattern;
    elseif settings.stack and (modules.corelib.g_keyboard.areKeysPressed("CapsLock+A")) then
        pattern = Stack.westPattern;
    elseif settings.stack and (modules.corelib.g_keyboard.areKeysPressed("CapsLock+D")) then
        pattern = Stack.eastPattern;
    end

    if (not pattern) then return; end

    local playerPos = pos();
    for _, creature in pairs(getSpectators(playerPos, pattern)) do
        if (not creature:isNpc() and creature:canShoot() and not creature:isPlayer()) then
            local monsterDistance = getDistanceBetween(playerPos, creature:getPosition())
            if (monsterDistance <= maxDistance and
                (
                    furthestMonster == nil or
                    monsterDistance > getDistanceBetween(playerPos, furthestMonster:getPosition())
                )
            ) then
                furthestMonster = creature;
            end
        end
    end

    if (not furthestMonster) then return; end


    g_game.stop();
    g_game.attack(furthestMonster);

    say(spell);
    
    schedule(600, function()
        g_game.cancelAttack();
    end);
    delay(600); 
end);




addCheckBox("bugmap", "Bugmap", false, leftPanel, "Desvia de obstaculos fora da pz")
if true then

onKeyPress(function(keys) 
 if settings.bugmap and not isInPz() then
 consoleModule = modules.game_console
  if (keys == bugn and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.y = ppos.y - 6
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == bugs and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.y = ppos.y + 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == buge and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.x = ppos.x - 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == bugd and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.x = ppos.x + 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == cima and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.y = ppos.y - 6
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == baixo and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.y = ppos.y + 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == esquerda and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.x = ppos.x - 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == direita and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.x = ppos.x + 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == cima8 and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.y = ppos.y - 6
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == baixo2 and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.y = ppos.y + 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == esquerda4 and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.x = ppos.x - 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  elseif (keys == direita6 and not consoleModule:isChatEnabled()) then
   ppos = pos()
   ppos.x = ppos.x + 7
   bgTile = g_map.getTile(ppos)
   if bgTile then
    use(g_map.getTile(ppos):getTopUseThing())
   end
  end
 end
end)


if settings.bugmap and not bugconfig or (bugconfig and bugconfig ~= 'WASD') then
  bugn = 'W'
  bugs = 'S'
  buge = 'A'
  bugd = 'D'
  cima = 'Up'
  baixo = 'Down'
  esquerda = 'Left'
  direita = 'Right'
  cima8 = 'Numpad8'
  baixo2 = 'Numpad2'
  esquerda4 = 'Numpad4'
  direita6 = 'Numpad6'
  bugconfig = 'WASD'
 end
end







addCheckBox("jump", "Auto Jump ", false, leftPanel, "Usa Jump Up/Down na parede ao apertar 2 vez alguma tecla do WASD/Setas/Numpad.")
if true then

local walkDir
onKeyDown(function(keys)
  usingWASD = modules.game_walking.wsadWalking
  if usingWASD then
    if keys == "W" or keys == "A" or keys == "S" or keys == "D" then  -- WASD
      walkDir = keys
    end
  if usingWASD then
    if keys == "Numpad2" or keys == "Numpad4" or keys == "Numpad6" or keys == "Numpad8" then  -- Numpad
      walkDir = keys
    end
    if keys == "Up" or keys == "Right" or keys == "Down" or keys == "Left" then -- SETAS
      walkDir = keys
    end
  end
  end
end)

macro(2, function()
    if not settings.jump then
      return
    end
  local playerPos = pos()
  local levitateTile
  if walkDir == "W" or walkDir == "Up" or walkDir == "Numpad8" then -- north
    playerPos.y = playerPos.y - 1
    turn(0)
    levitateTile = g_map.getTile(playerPos)
  elseif walkDir == "D" or walkDir == "Right" or walkDir == "Numpad6" then -- east
    playerPos.x = playerPos.x + 1
    turn(1)
    levitateTile = g_map.getTile(playerPos)
  elseif walkDir == "S" or walkDir == "Down" or walkDir == "Numpad2" then -- south
    playerPos.y = playerPos.y + 1
    turn(2)
    levitateTile = g_map.getTile(playerPos)
  elseif walkDir == "A" or walkDir == "Left" or walkDir == "Numpad4" then -- west
    playerPos.x = playerPos.x - 1
    turn(3)
    levitateTile = g_map.getTile(playerPos)
end



  if levitateTile and not levitateTile:isWalkable() then
    if levitateTile:getGround() then
      say('Jump up')
      walkDir = nil
    else
      say('Jump down')
      walkDir = nil
    end
  end
  walkDir = nil
end)
end





addCheckBox("jumpseta", "Auto Jump Marcado", false, leftPanel, "Usa Jump Up/Down na posicao setada, usando kunai e jump, configure as teclas no painel de configuracao.")
if true then
end





exhaustPot = 0
if type(storage[player:getName()]) ~= 'table' or #storage[player:getName()] == 0 then
  storage[player:getName()] = {}
  storage[player:getName()][1] = {texto = 'Stack', magia = 'Shunshin', totalAtivo = 0, totalExhaust = 3000, exhaustTime = 0, activeTime = 0}
end

Exhausted = function(var) return type(var) == 'number' and var >= now end

local Keys = modules.corelib.g_keyboard.isKeyPressed

function getNearTiles(pos)
    if type(pos) ~= "table" then pos = pos:getPosition() end

    local tiles = {}
    local dirs = {
        {-1, 1}, {0, 1}, {1, 1}, {-1, 0}, {1, 0}, {-1, -1}, {0, -1}, {1, -1}
    }
    for i = 1, #dirs do
        local tile = g_map.getTile({
            x = pos.x - dirs[i][1],
            y = pos.y - dirs[i][2],
            z = pos.z
        })
        if tile then table.insert(tiles, tile) end
    end

    return tiles
end



getItem = function(tile, id)
  for index, value in ipairs(tile:getItems()) do
    if value:getId() == id then
      return false
    end
  end
  return true
end


Jump = {}

Jump.tecla = (storage.jumpuplocal)

Jump.saveUp = (storage.jumpuplocal1)

Jump.saveDown = (storage.jumpuplocal2)

Jump.remove = (storage.jumpuplocal3)



Jump.upOrdown = function()
    if Keys(Jump.saveUp) then
        return 1
    elseif Keys(Jump.saveDown) then
        return 2
    end
    return false
end

Jump.comparePos = function(p1, p2)
  return p1.x == p2.x and p1.y == p2.y and p1.z == p2.z
end

Jump.findPos = function(pos)
    for x, v in ipairs(storage.jumps) do
        if Jump.comparePos(pos, v) then
            return x
        end
    end
  return false
end

Jump.removeIt = function(position)
    for x, v in ipairs(storage.jumps) do
        if Jump.comparePos(position, v) then
            info('Removed: ' .. Jump.postostring(position))
      if Jump.comparePos(position, Jump.Pos) then
        if g_map.getTile(Jump.Pos) then
          g_map.getTile(Jump.Pos):setText('')
        end
        Jump.Pos = {x = 0, y = 0, z = 0}
      end
            return table.remove(storage.jumps, x)
        end
    end
end


Jump.preciseDistance = function(pos1, pos2)
    return math.abs(pos1.x - pos2.x) + math.abs(pos1.y - pos2.y)
end

if type(storage.jumps) ~= 'table' then
  storage.jumps = {}
end

Jump.postostring = function(pos)
    return pos.x .. ',' .. pos.y .. ',' .. pos.z
end

function Jump.actualDirection()
    local dir = player:getDirection()
    if dir > 3 then
        if dir < 6 then
            return 1
        else
            return 3
        end
    else
        return dir
    end
end

Jump.convertPos = function(position)
    local pos = pos()
    pos.x = position.x
    pos.y = position.y
    pos.z = position.z
    return pos
end

Jump.Pos = {x = 0, y = 0, z = 0}

macro(100, function()
      if not settings.jumpseta then
      return
    end
    if Keys(Jump.remove) then
        return Jump.removeIt(player:getPosition())
    end
    checarSave = Jump.upOrdown()
    if checarSave and not Jump.findPos(pos()) then
    save = 'Jump down'
        if checarSave == 1 then
            save = 'Jump up'
    end
        info('Saved: ' .. Jump.postostring(pos()) .. ' ' .. save)
        table.insert(storage.jumps, {jumpTo = save, direction = Jump.actualDirection(), x = pos().x, y = pos().y, z = pos().z})
    end
    if #storage.jumps > 0 and Jump.lastPos ~= Jump.postostring(pos()) then
        for c, k in ipairs(storage.jumps) do
            local kPos = Jump.convertPos(k)
            if kPos.z == pos().z then
                if (Jump.preciseDistance(pos(), kPos) < Jump.preciseDistance(pos(), Jump.Pos) or pos().z ~= Jump.Pos.z) then
                    if findPath(pos(), kPos, 100, {ignoreNonPathable = false, ignoreStairs = true, ignoreCreatures = false}) then
                        Jump.actual = k
                        if g_map.getTile(Jump.Pos) then
                            g_map.getTile(Jump.Pos):setText('')
                        end
                        Jump.Pos = kPos    
                    end
                end
            end
        end
    Jump.lastPos = Jump.postostring(pos())
    end
    Jump.tile = g_map.getTile(Jump.Pos)
    if Jump.tile then
        local distance = getDistanceBetween(Jump.Pos, pos())
        if Keys(Jump.tecla) then
            Jump.tile:setText(Jump.actual.jumpTo, 'green')
            if distance > 1 then
        for index, value in ipairs(getNearTiles(Jump.Pos)) do
          if getItem(value, 1771) then
            if value:canShoot() and (value:isWalkable() or value:getTopThing():getName():len() > 0) and value:isPathable() then
              if not Exhausted(storage[player:getName()][1].exhaustTime) then
                useWith(settings.kunai, value:getTopThing())
                g_game.stop()
              end
            end
          end
        end
        if not (Jump.waitToReach and Jump.waitToReach >= now) and distance > 3 then
          player:autoWalk(Jump.Pos)
          Jump.waitToReach = now + 750
        else
          g_game.use(Jump.tile:getTopUseThing())
        end
            elseif distance == 1 then
                if (not Jump.waitToWalk or Jump.waitToWalk < now) and not player:isServerWalking() then
                    autoWalk(Jump.Pos, 1)
                    Jump.waitToWalk = now + 500
                end
            elseif Jump.actualDirection() ~= Jump.actual.direction then
                g_game.turn(Jump.actual.direction)
            else
                say(Jump.actual.jumpTo)
            end
        else
            Jump.tile:setText(Jump.actual.jumpTo, 'red')
        end
    end
end)










addCheckBox("others", "Atacar Monstros", false, rightPanel, "Ataca todos os monstros da tela.")
if true then


end

addCheckBox("monstrovida", "Monstros % de vida", false, leftPanel, "Ataca todos os monstros da tela.")
if true then

local showhp = macro(200, function() end)


onCreatureHealthPercentChange(function(creature, healthPercent)
if settings.monstrovida then
    if showhp:isOff() then  return end
    if creature:isMonster() or creature:isPlayer() and creature:getPosition() and pos() then
        if creature:getPosition() then
            creature:setText(healthPercent .. "%")
        else
            creature:clearText()

      end
    end
  end
end)

end


addCheckBox("antipushh", "Anti Push", false, leftPanel, "Ataca todos os monstros da tela.")
if true then






local dropItems = (storage.drop)
local maxStackedItems = 5

gpAntiPushDrop = macro(600 , function ()
  antiPush()
end)

onPlayerPositionChange(function()
    antiPush()
end)

function antiPush()
  if not settings.antipushh then
    return
  end

  local tile = g_map.getTile(pos())
  if tile and tile:getThingCount() < maxStackedItems then
    local thing = tile:getTopThing()
    if thing and not thing:isNotMoveable() then
      for i, item in pairs(dropId) do
        if item ~= thing:getId() then
            local dropItem = findItem(item)
            if dropItem then
              g_game.move(dropItem, pos(), 2)
            end
        end
      end
    end
  end
end

end

if not storage.drop then
    storage.drop = { 3031, 3035 }
end


local Keys = modules.corelib.g_keyboard.isKeyPressed



function getNearTiles(pos)
    if type(pos) ~= "table" then pos = pos:getPosition() end

    local tiles = {}
    local dirs = {
        {-1, 1}, {0, 1}, {1, 1}, {-1, 0}, {1, 0}, {-1, -1}, {0, -1}, {1, -1}
    }
    for i = 1, #dirs do
        local tile = g_map.getTile({
            x = pos.x - dirs[i][1],
            y = pos.y - dirs[i][2],
            z = pos.z
        })
        if tile then table.insert(tiles, tile) end
    end

    return tiles
end


Stairs = {}


Stairs.Exclude = {}
Stairs.Click = {7047, 5102, 5111, 6207, 1948, 435, 7771, 5542, 8657, 6264, 1646, 1648, 1678, 5291, 1680, 6905, 6262, 1664, 13296, 1067, 13861, 11931, 1949, 6896, 6205}


Stairs.postostring = function(pos)
    return pos.x .. ',' .. pos.y .. ',' .. pos.z
end

function Stairs.accurateDistance(c)
    if type(c) == 'userdata' then
        c = c:getPosition()
    end
    return math.abs(pos().x-c.x) + math.abs(pos().y-c.y)
end

Stairs.Check = {}

Stairs.checkTile = function(tile)
    if not tile then
        return false
  end
  
  local pos = Stairs.postostring(tile:getPosition())
  
    if Stairs.Check[pos] ~= nil then
        return Stairs.Check[pos]
  end
  
    if not tile:getTopUseThing() then
    Stairs.Check[pos] = false
        return false
    end
  
    for _, x in ipairs(tile:getItems()) do
        if table.find(Stairs.Click, x:getId()) then
            Stairs.Check[pos] = true
      return true
        elseif table.find(Stairs.Exclude, x:getId()) then
      Stairs.Check[pos] = false
      return false
    end
    end
  
    local cor = g_map.getMinimapColor(tile:getPosition())
    if cor >= 210 and cor <= 213 and not tile:isPathable() and tile:isWalkable() then
    Stairs.Check[pos] = true
        return true
  else
    Stairs.Check[pos] = false
        return false
    end
end


Stairs.checkAll = function()
  local tiles = {}
  for _, tile in ipairs(g_map.getTiles(posz())) do
    if Stairs.checkTile(tile) then
      table.insert(tiles, tile)
    end
  end
  if #tiles == 0 then return end
    table.sort(tiles, function(a, b)
        return Stairs.accurateDistance(a:getPosition()) < Stairs.accurateDistance(b:getPosition())
    end)
    for y, z in ipairs(tiles) do
        if findPath(z:getPosition(), pos(), 100, { ignoreCreatures = false, ignoreNonWalkable = false, ignoreNonPathable = false}) then
            return z
        end
    end
  return false
end


onPlayerPositionChange(function(newPos, oldPos)
  lastWalk = nil
end)

getItem = function(tile, id)
  for index, value in ipairs(tile:getItems()) do
    if value:getId() == id then
      return false
    end
  end
  return true
end

addCheckBox("escadd", "Auto Escada", true, leftPanel, "Suba e desca escadas precionando botao de atalho.")
if true then
end
macro(1, function()
  if modules.game_console:isChatEnabled() then return end
    if Stairs.postostring(player:getPosition()) == Stairs.lastPosition then
        if Keys(storage.escadaid) and Stairs.See and settings.escadd then
      if lastWalk and lastWalk >= now then return end
      local pos = Stairs.See:getPosition()
      Stairs.distance = getDistanceBetween(player:getPosition(), pos)
            Stairs.See:setText('Escada\n' .. storage.escadaid, 'green')
            if Stairs.See:isWalkable() and not Stairs.See:isPathable() and not player:isServerWalking() and (not lastWalk or lastWalk < now) and autoWalk(pos, 1) then lastWalk = now + 500 return end
      if Stairs.distance > 1 then
        for index, value in ipairs(getNearTiles(pos)) do
          if getItem(value, 1771) then
            if value:canShoot() and (value:isWalkable() or value:getTopThing():getName():len() > 0) and value:isPathable() then
              if not Exhausted(storage[player:getName()][1].exhaustTime) then
                useWith(settings.kunai, value:getTopThing())
              end
            end
          end
        end
      end
      if (Stairs.tryWalk and Stairs.tryWalk >= now) or Stairs.distance <= 3 then
        g_game.use(Stairs.See:getTopUseThing())
      else
        player:autoWalk(pos)
        Stairs.tryWalk = now + 1000
      end
        elseif Stairs.See and Stairs.See:getTopUseThing() and settings.escadd then
            Stairs.See:setText('Escada\n' .. storage.escadaid, 'red')
    end
        return
    end
    if Stairs.See and Stairs.See:getTopUseThing() then
        Stairs.See:setText('')
    end
    Stairs.See = Stairs.checkAll()
    Stairs.lastPosition = Stairs.postostring(player:getPosition())
  delay(50)
end)


cor = UI.Label("Botao de atalho escada:", leftPanel)
cor:setColor("green")
cor:setFont("verdana-11px-rounded")
UI.Separator(leftPanel)

UI.TextEdit(storage.escadaid or "Space", function(widget, text)   
  storage.escadaid = text
end,leftPanel)

UI.Separator(leftPanel)
cor = UI.Label("Nome do Jogador:", leftPanel)
cor:setColor("green")
cor:setFont("verdana-11px-rounded")




followName = "autofollow"
if not storage[followName] then storage[followName] = { player = 'name'} end
local toFollowPos = {}
followTE = UI.TextEdit(storage[followName].player or "name", function(widget, newText)
    storage[followName].player = newText
end, leftPanel)

addCheckBox("followz", "Follow", false, leftPanel, "Da follow no jogador definido.")
if true then

addCheckBox("followr", "Follow Ataque", false, leftPanel, "Vai seguir o jogador e podendo atacar os monstros, tambem sobe escadas.")
if true then
end

local followChange = macro(200, function()
if settings.followz then
local followw= storage[followName].player 
    if g_game.isFollowing() then
        return
    end
    for _, followcreature in ipairs(g_map.getSpectators(pos(), false)) do
        if (followcreature:getName() == followw and getDistanceBetween(pos(), followcreature:getPosition()) <= 8) then
            g_game.follow(followcreature)
        end
    end
  end
end)

local followMacro = macro(20, function()
if settings.followr then
    local target = getCreatureByName(storage[followName].player)
    if target then
        local tpos = target:getPosition()
        toFollowPos[tpos.z] = tpos
    end
    if player:isWalking() then
        return
    end
    local p = toFollowPos[posz()]
    if not p then
        return
    end
    if autoWalk(p, 20, { ignoreNonPathable = true, precision = 1 }) then
        delay(100)
    end
  end
end)

onPlayerPositionChange(function(newPos, oldPos)
  if followChange:isOff() then return end
  if (g_game.isFollowing()) then
    tfollow = g_game.getFollowingCreature()

    if tfollow then
      if tfollow:getName() ~= storage[followName].player then
        followTE:setText(tfollow:getName())
        storage[followName].player = tfollow:getName()
      end
    end
  end
end)
end

















addScrollBar("mana", "Mana", 0, 99, 1000, rightPanel, "% mana para treinar o magic level")

UI.Separator(rightPanel)

UI.TextEdit(storage.magiamana or "Nome da magia", function(widget, text)   
  storage.magiamana = text
end,rightPanel)

addCheckBox("manat", "Treinar Magic Level", false, rightPanel, "Vai usar a magia para treinar magic level")
macro(500, function()
    if settings.manat then
  if manapercent() > settings.mana then
say(storage.magiamana)
end
end
end)

addScrollBar("chakra", "Cooldown", 0, 10000, 1000, rightPanel, "% Defina o tempo para usar a magia de spam.")

UI.Separator(rightPanel)

UI.TextEdit(storage.chakrares or "Nome da magia", function(widget, text)   
  storage.chakrares = text
end,rightPanel)

addCheckBox("chakrarest", "Spamar Magia", false, rightPanel, "Vai spamar magia no cooldown que voce desejar.")
if true then
end
macro(settings.chakra, function()
    if settings.chakrarest then
  say(storage.chakrares)
  end
end)

addCheckBox("dance", "Dance", false, rightPanel, "Vai ficar girando, para evitar Kick")
macro(20, function()
if settings.dance then
    turn(math.random(0, 3))
end
end)

addCheckBox("treinar", "!Treinar", false, rightPanel, "Fala !treinar ao reconectar.")
if true then
end

macro(2000, function()
if settings.treinar then
    if treinar ~= true then
        treinar = true
        say("!treinar")
    end
end
end)



addCheckBox("colorir", "Alterar a cor dos nomes", true, rightPanel, "Altera a cor dos nomes de jogadores, guild, pk, pt,inimigo e jogadores que te atacam.")
if true then
macro(200, function ()
if settings.colorir then
for z, spec in ipairs(getSpectators()) do
  if spec:isPlayer() and spec:getSkull() == 3 then
      spec:setInformationColor("orange")
            spec:setMarked("orange")
        
  end
end
for a, spec in ipairs(getSpectators()) do
  if spec:isPlayer() and spec:getEmblem() == 3 then
      spec:setInformationColor("pink")
            spec:setMarked("pink")
  end
end
for a, spec in ipairs(getSpectators()) do
  if spec:isPlayer() and spec:getEmblem() == 2 then
      spec:setInformationColor("red")
            spec:setMarked("red")
  end
end
for a, spec in ipairs(getSpectators()) do
  if spec:isPlayer() and spec:getEmblem() == 1 then
      spec:setInformationColor("#00FFFF")
            spec:setMarked("#00FFFF")
  end
end
for a, spec in ipairs(getSpectators()) do
  if spec:isPlayer() and spec:getShield() == 3 then
      spec:setInformationColor("blue")
            spec:setMarked("blue")
  end
end
for a, spec in ipairs(getSpectators()) do
  if spec:isPlayer() and spec:getShield() == 4 then
      spec:setInformationColor("yellow")
            spec:setMarked("yellow")
  end
end

end
end)
end




addCheckBox("ptaceitar", "Aceitar PT", false, rightPanel, "Aceita convite de PT.")
if true then
end

macro(200, function()
if settings.ptaceitar then
for z, spec in ipairs(getSpectators()) do
  if spec:isPlayer() and spec:getShield() == 1 then
            g_game.partyJoin(spec:getId())
  end
end
end
end)



addCheckBox("ptinvite", "Auto Invite PT", false, rightPanel, "Invita jogadores que falarem PT no chat.")
if true then
end

onTalk(function(name, level, mode, text, channelId, pos)
if settings.ptinvite then
if name == player:getName() then return end
    if mode ~= 1 then  return end
    if string.find(text, "pt") and settings.ptinvite == true then
        local friend = getPlayerByName(name)
        g_game.partyInvite(friend:getId())
    end
  end
end)



addCheckBox("hptarget", "Informacao HP Target", false, rightPanel, "Mostra informacao no target na tela, hp, outfit e nome.")
if true then
end


local hpalvo = setupUI([[

Panel
  anchors.horizontalCenter: parent.horizontalCenter
  anchors.top: parent.top
  height: 68
  color: red
  font: verdana-11px-rounded
  margin-top: 130
  visible: true


  Panel
    id: bossPanel
    image-border: 100
    anchors.top: parent.top
    anchors.left: parent.left
    image-color: #d9d9d9
    size: 70 70


    UICreature
      id: bossOutfit
      anchors.left: parent.left
      anchors.top: parent.top
      anchors.right: parent.right
      size: 100 100


  Panel
    id: bossPanel_Name
    image-border: 6
    image-color: #d9d9d9
    padding: 3
    height: 30
    margin-top: 3
    margin-right: 3
    anchors.top: parent.top
    anchors.right: parent.right
    anchors.left: bossPanel.right

    Label
      id: bossName
      anchors.left: bossPanel.right
      text: Monster Name
      font: verdana-11px-rounded
      text-horizontal-auto-resize: true

    UIWidget
      id: skullUI
      size: 13 13
      anchors.left: bossPanel_Name.right
      anchors.right: parent.right
      image-border: 6

  Panel
    id: progressPanel
    image-border: 6
    image-color: #d9d9d9
    padding: 3
    height: 25
    margin-top: 5
    margin-right: 2
    anchors.top: bossPanel_Name.bottom
    anchors.left: bossPanel.right
    anchors.right: parent.right
  
    ProgressBar
      id: percent
      background-color: green
      height: 18 
      anchors.left: parent.left
      text: 100%
      width: 160
      margin-right: 5

]], modules.game_interface.gameMapPanel)


local skull = {
  normal = "",
  white = "/images/game/skulls/skull_white",
  yellow = "/images/game/skulls/skull_yellow",
  green = "/images/game/skulls/skull_green",
  orange = "/images/game/skulls/skull_orange",
  red = "/images/game/skulls/skull_red",
  black = "/images/game/skulls/skull_black"
}

if not g_game.isAttacking() and not settings.hptarget then
 hpalvo:hide()
 end

hpalvo:hide()

hptarget = macro(50, function()
if settings.hptarget then
if g_game.isAttacking() then
 hpalvo:show()
end
end
end)

hptarget = macro(50, function()
if settings.hptarget then
if not g_game.isAttacking() then
 hpalvo:hide()

elseif g_game.isAttacking() and settings.hptarget then
  hpalvo:show()
  --- get attacking creature name
   local mob = g_game.getAttackinggCreature()
   hpalvo.bossPanel_Name.bossName:setText(mob:getName())

  --- get attacking creature outfit
   local monsOutfit = mob:getOutfit()
   hpalvo.bossPanel.bossOutfit:setOutfit(monsOutfit)

  --- get attacking creature health percent
   local monsterHP = mob:getHealthPercent()
   hpalvo.progressPanel.percent:setText(monsterHP.."%")
   hpalvo.progressPanel.percent:setPercent(monsterHP)

  if monsterHP > 75 and settings.hptarget then
    hpalvo.progressPanel.percent:setBackgroundColor("green")
   elseif monsterHP > 50 then
    hpalvo.progressPanel.percent:setBackgroundColor("yellow")
   elseif monsterHP > 25 then
    hpalvo.progressPanel.percent:setBackgroundColor("orange")
   elseif monsterHP > 1 then
    hpalvo.progressPanel.percent:setBackgroundColor("red")
  end

  --- get attacking creature skull 
  if mob:getSkull() == 0 and settings.hptarget then
     hpalvo.bossPanel_Name.skullUI:setIcon(skull.normal)
   elseif mob:getSkull() == 1 then
     hpalvo.bossPanel_Name.skullUI:setIcon(skull.yellow)
   elseif mob:getSkull() == 2 then
     hpalvo.bossPanel_Name.skullUI:setIcon(skull.green)
   elseif mob:getSkull() == 3 then
     hpalvo.bossPanel_Name.skullUI:setIcon(skull.white)
   elseif mob:getSkull() == 4 then
     hpalvo.bossPanel_Name.skullUI:setIcon(skull.red)
   elseif mob:getSkull() == 5 then
     hpalvo.bossPanel_Name.skullUI:setIcon(skull.black)
   elseif mob:getSkull() == 6 then
    hpalvo.bossPanel_Name.skullUI:setIcon(skull.orange)
  end
 end
 end
end)






addCheckBox("title", "Informacao na janela", true, rightPanel, "Personalize o nome da janela")
if true then
  local vocText = ""

  if voc() == 237 or voc() == 11 then
      vocText = "- EK"
  elseif voc() == 2 or voc() == 12 then
      vocText = "- RP"
  elseif voc() == 3 or voc() == 13 then
      vocText = "- MS"
  elseif voc() == 4 or voc() == 14 then
      vocText = "- ED"
  end

  macro(5000, function()
    if settings.title then
      if hppercent() > 0 then
          g_window.setTitle(name() .. " - ".. "Level: " .. lvl() .. " % " .. player:getLevelPercent() .. "                                                                                                                                                                                 @war".. vocText)
      else
          g_window.setTitle("@war - " .. name() .. " - Voce sentou na mandioca xD")
      end
    else
      g_window.setTitle("@war - " .. name())
    end
  end)
end

addCheckBox("separatePm", "Abrir pm", false, rightPanel, "Vai abrir as mensagens automatico e salvando se voce relogar")
if true then
  onTalk(function(name, level, mode, text, channelId, pos)
    if mode == 4 and settings.separatePm then
        local g_console = modules.game_console
        local privateTab = g_console.getTab(name)
        if privateTab == nil then
            privateTab = g_console.addTab(name, true)
            g_console.addPrivateText(g_console.applyMessagePrefixies(name, level, text), g_console.SpeakTypesSettings['private'], name, false, name)
        end
        return
    end
  end)
end









addCheckBox("autoOpenDoors", "Abrir portas", false, rightPanel, "Abra as portas ao tentar entrar nelas.")
if true then
  local doorsIds = { 5007, 8265, 1629, 1632, 5129, 6252, 6249, 7715, 7712, 7714, 
                     7719, 6256, 1669, 1672, 5125, 5115, 5124, 17701, 17710, 1642, 
                     6260, 5107, 4912, 6251, 5291, 1683, 1696, 1692, 5006, 2179, 5116, 
                     1632, 11705, 30772, 30774, 6248, 5735, 5732, 5120, 23873, 5736,
                     6264, 5122, 30049, 30042, 7727 }

  function checkForDoors(pos)
    local tile = g_map.getTile(pos)
    if tile then
      local useThing = tile:getTopUseThing()
      if useThing and table.find(doorsIds, useThing:getId()) then
        g_game.use(useThing)
      end
    end
  end

  onKeyPress(function(keys)
    local wsadWalking = modules.game_walking.wsadWalking
    if not settings.autoOpenDoors then return end
    local pos = player:getPosition()
    if keys == 'Up' or (wsadWalking and keys == 'W') then
      pos.y = pos.y - 1
    elseif keys == 'Down' or (wsadWalking and keys == 'S') then
      pos.y = pos.y + 1
    elseif keys == 'Left' or (wsadWalking and keys == 'A') then
      pos.x = pos.x - 1
    elseif keys == 'Right' or (wsadWalking and keys == 'D') then
      pos.x = pos.x + 1
    elseif wsadWalking and keys == "Q" then
      pos.y = pos.y - 1
      pos.x = pos.x - 1
    elseif wsadWalking and keys == "E" then
      pos.y = pos.y - 1
      pos.x = pos.x + 1
    elseif wsadWalking and keys == "Z" then
      pos.y = pos.y + 1
      pos.x = pos.x - 1
    elseif wsadWalking and keys == "C" then
      pos.y = pos.y + 1
      pos.x = pos.x + 1
    end
    checkForDoors(pos)
  end)
end




addCheckBox("moneyconverter", "Converter Dinheiro", false, rightPanel, "converte seu dinheiro.")
if true then
local moneyIds = {3031, 3035} -- gold coin, platinium coin
macro(1000, function()
if settings.moneyconverter then
  local containers = g_game.getContainers()
  for index, container in pairs(containers) do
    if not container.lootContainer then -- ignore monster containers
      for i, item in ipairs(container:getItems()) do
        if item:getCount() == 100 then
          for m, moneyId in ipairs(moneyIds) do
            if item:getId() == moneyId then
              return g_game.use(item)            
            end
          end
        end
      end
    end
  end
  end
end)
end





addCheckBox("bless", "Auto Bless", false, rightPanel, "Fala !bless ao entrar no game.")
if true then
  local blessed = false
  onTextMessage(function(mode,text) 
    if not settings.bless then return end
    
    text = text:lower()

    if text == "you already have all blessings." then
      blessed = true
    end
  end)
  if settings.bless then
    if player:getBlessings() == 0 then
      say("!bless")
      schedule(2000, function() 
          if g_game.getClientVersion() > 1000 then
            if not blessed and player:getBlessings() == 0 then
                warn("!! Blessings not bought !!")
            end
          end
      end)
    end
  end
end

addCheckBox("jamm", "Auto Jam", false, rightPanel, "Fala !jam quando nao haver nada no slot do amuleto.")
if true then
macro(2000, function()
if settings.jamm then
  if not getNeck() then
      say('!jam')
  end
  end
end)
end


addCheckBox("reUse", "Manter mira Item", false, rightPanel, "Mantenha a mira depois de usar o item.")
if true then
  local excluded = {268, 237, 238, 23373, 266, 236, 239, 7643, 23375, 7642, 23374, 5908, 5942} 

  onUseWith(function(pos, itemId, target, subType)
    if settings.reUse and not table.find(excluded, itemId) then
      schedule(50, function()
        item = findItem(itemId)
        if item then
          modules.game_interface.startUseWith(item)
        end
      end)
    end
  end)
end



addCheckBox("reta", "Reta ataque", false, rightPanel, "Vira de frente para o alvo.")
if true then

end


addCheckBox("bagcheia", "Abrir proxima bag", false, rightPanel, "abre proxima bag quando atual estiver cheia.")
if true then
macro(1000, function()
if settings.bagcheia then
  local containers = getContainers()
  for i, container in pairs(containers) do
    if container:getItemsCount() == container:getCapacity() then
      for _, item in ipairs(container:getItems()) do
        if item:isContainer() then
          g_game.open(item, container)
        end
      end
    end
  end
end
end)
end

addCheckBox("juntaritens", "Juntar itens", false, rightPanel, "Junta os itens separados da bag.")
if true then
macro(1000, function()
if settings.juntaritens then
  local containers = g_game.getContainers()
  local toStack = {}
  for index, container in pairs(containers) do
    if not container.lootContainer then -- ignore monster containers
      for i, item in ipairs(container:getItems()) do
        if item:isStackable() and item:getCount() < 100 then
          local stackWith = toStack[item:getId()]
          if stackWith then
            g_game.move(item, stackWith[1], math.min(stackWith[2], item:getCount()))
            return
          end
          toStack[item:getId()] = {container:getSlotPosition(i - 1), 100 - item:getCount()}
        end
      end
    end
  end
end
end)
end

addScrollBar("hpmagiaalvo", "HP Alvo", 0, 100, 1000, leftPanel, "% de vida do alvo pra usar magia")


UI.Separator(leftPanel)

UI.TextEdit(storage.magiaalvo or "Nome da magia", function(widget, text)   
  storage.magiaalvo = text
end,leftPanel)

addCheckBox("hpmagia", "Magia hp alvo", false, leftPanel, "Usar magia baseado na vida do alvo.")
if true then
macro(200, function()
   if settings.hpmagia and g_game.isAttacking() and g_game.getAttackinggCreature():isPlayer() and g_game.getAttackinggCreature():getHealthPercent() < settings.hpmagiaalvo then
        say(storage.magiaalvo)  
    end 
end)
end




addCheckBox("lootlook", "Auto Loot Look", false, rightPanel, "Adiciona os itens que da look no !autoloot.")
if true then
local doAutoLootLook = macro(5000, function() end)
onTextMessage(function(mode, text)
if settings.lootlook then
    if mode == 20 and text:find("You see") and doAutoLootLook:isOn() then
        local regex = [[You see (?:an|a)([a-z A-Z]*).]]
        local data = regexMatch(text, regex)[1]
        if data and data[2] then
            say('!autoloot ' ..data[2]:trim())
        end
    end
end
end)
end



addCheckBox("chase", "Atacar seguindo", false, rightPanel, "Sempre atacar seguindo.")
if true then
macro(250, function()
if settings.chase then
   if g_game.isOnline() and g_game.isAttacking() then
         g_game.setChaseMode(1)
           end
           end
       end)
       end

addCheckBox("bagpe", "Puxar item do pe pra bag", false, leftPanel, "Pega o item de baixo do personagem para sua bag.")
if true then
macro(100, function()
if settings.bagpe then
  local tile = g_map.getTile(pos())
  if tile then
    for _, item in ipairs(tile:getItems()) do
      if item:isPickupable() then
        if g_game.move(item, {x=65535, y=SlotBack, z=0}, item:getCount()) then
          delay(100)
        end
      end
    end
  end
end
end)
end

addCheckBox("bagprincipal", "Abrir bag principal", false, leftPanel, "Sempre abrir a bag principal.")
if true then
macro(1000, function()
if settings.bagprincipal then
    bpItem = getBack()
    bp = getContainer(0)

    if not bp and bpItem ~= nil then
        g_game.open(bpItem)
    end

end
end)
end


addCheckBox("summon", "Auto Summon", false, leftPanel, "Quando seu summon morrer, vai usar a magia novamente.")
if true then

local summonName = (storage.summonnome)

function isSummonOnScreen()
    for _, spec in ipairs(getSpectators()) do
        if not spec:isPlayer() and spec:getName() == summonName then
     return true
    end
   end
end

Summon = macro(100, function()
if settings.summon then
      if not isSummonOnScreen() then
          say(storage.summonmagia)
   end
end
end)
end


  UI.Separator(leftPanel)

cor = UI.Label("Nome da magia", leftPanel)
cor:setColor("green")
cor:setFont("verdana-11px-rounded")

UI.TextEdit(storage.summonmagia or "Nome da magia", function(widget, text)   
  storage.summonmagia = text
end,leftPanel)

UI.Separator(leftPanel)
cor = UI.Label("Nome do Summon", leftPanel)
cor:setColor("green")
cor:setFont("verdana-11px-rounded")

UI.TextEdit(storage.summonnome or "Nome do Summon", function(widget, text)   
  storage.summonnome = text
end,leftPanel)





UI.Separator(rightPanel)
cor = UI.Label("Parar Cave/Target\nBotao de Atalho:", rightPanel)
cor:setColor("green")
cor:setFont("verdana-11px-rounded")


onKeyPress(function(keys)
if keys == (storage.stopcave) then
if CaveBot.isOn() or TargetBot.isOn() then
CaveBot.setOff()
TargetBot.setOff()
elseif CaveBot.isOff() or TargetBot.isOff() then
CaveBot.setOn()
TargetBot.setOn()
end
end
end)

UI.TextEdit(storage.stopcave or "Shift+Space", function(widget, text)   
  storage.stopcave = text
end,rightPanel)


addCheckBox("limpartexto", "Limpar Textos", false, leftPanel, "Sem mensagens Laranja na tela.")
if true then
onStaticText(function(thing, text)
    if settings.limpartexto and not text:find('says:') then
        g_map.cleanTexts()
    end
end)
end

addCheckBox("esconderspr", "Esconder Sprites", false, leftPanel, "Esconder todos os efeitos do jogo.")
if true then
end
spr = macro(100, function() end)
onAddThing(function(tile, thing)
    if spr.isOff() then return end
    if thing:isEffect() and settings.esconderspr then
        thing:hide()
    end
end)

---------------------------------------------------------------------------------- COMBO ----------------------------------------------------------------------------------




g_ui.loadUIFromString([[

cPanel < Panel
  margin: 3
  margin-bottom: 17
  layout:
    type: verticalBox

cmbComboWindow < MainWindow
  !text: tr('- COMBO -')
  font: verdana-11px-rounded
  size: 215 310
  color: pink
  @onEscape: self:hide()

  TabBar
    id: cmbTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-left: 40



  Panel
    id: cmbImagem
    anchors.top: cmbTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-border: 9





  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5        


]])

local comboPanelName = "listt"
  local ui = setupUI([[
Panel

  height: 35

  Button
    id: editCombo
    color: orange
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 35
    text: - COMBO -

  ]], parent)
  ui:setId(comboPanelName)

  if not storage[comboPanelName] then
    storage[ComboPanelName] = { 

    }
  end

rootWidget = g_ui.getRootWidget()
if rootWidget then
    CombosWindow = UI.createWidget('cmbComboWindow', rootWidget)
    CombosWindow:hide()
    TabBar2 = CombosWindow.cmbTabBar
    TabBar2:setContentWidget(CombosWindow.cmbImagem)
   for v = 1, 1 do




cmbPanel = g_ui.createWidget("cPanel") -- Creates Panel
cmbPanel:setId("panelButtons") -- sets ID

cmbPanel2 = g_ui.createWidget("cPanel") -- Creates Panel
cmbPanel2:setId("2") -- sets ID

cmbPanel3 = g_ui.createWidget("cPanel") -- Creates Panel
cmbPanel:setId("panelButtons") -- sets ID

cmbPanel4 = g_ui.createWidget("cPanel") -- Creates Panel
cmbPanel:setId("panelButtons") -- sets ID


TabBar2:addTab("Combo", cmbPanel)
TabBar2:setMarginLeft("70")
        color= UI.Label("by: @war",cmbPanel)
                color:setFont("verdana-11px-rounded")
color:setColor("green")

g_ui.loadUIFromString([[

spellzszourceBoxPopupMenu < ComboBoxPopupMenu
spellzszourceBoxPopupMenuButton < ComboBoxPopupMenuButton
spellzszourceBox < ComboBox
  @onSetup: |
    self:addOption("Combo")
    self:addOption("Area")



spellzEntryz < Label
  background-color: alpha
  text-offset: 18 0
  focusable: true
  height: 16

  CheckBox
    id: enabled
    anchors.left: parent.left
    anchors.verticalCenter: parent.verticalCenter
    width: 15
    height: 15
    margin-top: 2
    margin-left: 3

  $focus:
    background-color: #00000055


  Button
    id: remove
    !text: tr('X')
    color: red
    anchors.right: parent.right
    margin-right: 15
    width: 15
    height: 15                       

spellzHealing < Panel
  image-source: /images/ui/panel_flat
  image-border: 6
  padding: 3
  size: 490 230

  Label
    id: whenspellz
    anchors.left: spellzListz.right
    anchors.top: parent.top
    text: Tipo
    width: 28
    color: green
    font: verdana-11px-rounded
    margin-top: 10
    margin-left: 5

  spellzszourceBox
    id: spellzszource
    anchors.top: parent.top
    anchors.left: whenspellz.right
    margin-top: 5
    margin-left: 35
    width: 128



  Label
    id: castspellz
    anchors.left: whenspellz.left
    anchors.top: whenspellz.bottom
    text: Magia
    color: green
    font: verdana-11px-rounded
    margin-top: 9

  TextEdit
    id: spellzFormula
    color: red
    size: 155 21
    margin-left: -20
    anchors.left: spellzszource.left
    anchors.top: spellzszource.bottom
    anchors.right: spellzvaluez.right



  TextList
    id: spellzListz
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    padding: 1
    size: 270 216    
    margin-bottom: 3
    margin-left: 3
    vertical-scrollbar: spellzListzScrollBar

  VerticalScrollBar
    id: spellzListzScrollBar
    anchors.top: spellzListz.top
    anchors.bottom: spellzListz.bottom
    anchors.right: spellzListz.right
    step: 14
    pixels-scroll: true

  Button
    id: addspellz
    anchors.left: castspellz.left
    anchors.bottom: castspellz.bottom
    margin-bottom: -45
    margin-right: 10
    text: Adicionar
    size: 200 27
    color: yellow
    font: verdana-11px-rounded

  Button
    id: MoveUp
    anchors.right: addspellz.right
    anchors.bottom: addspellz.bottom
    margin-bottom: -35
    margin-right: -9
    text: Mover Para Cima
    color : orange
    size: 105 27
    font: verdana-11px-rounded

  Button
    id: MoveDown
    anchors.left: MoveUp.left
    anchors.bottom: MoveUp.bottom
    margin-bottom: 0
    margin-left: -107
    color : orange
    text: Mover Para Baixo
    size: 105 27
    font: verdana-11px-rounded 


combozWindow < MainWindow
  !text: tr('Combo')
  size: 520 350
  color: pink
  font: verdana-11px-rounded
  @onEscape: self:hide()

  spellzHealing
    id: spellzsz
    anchors.top: parent.top
    anchors.left: parent.left



  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8    

  Label
    id: fdp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-right: -270
    margin-bottom: 5
    text: @war
    width: 70
    font: terminus-14px-bold
    color: orange

  Button
    id: dicacombo
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-top: 16
    margin-right: 65
    font: verdana-11px-rounded
    text: Dica
    color: #00FFFF
    !tooltip: tr('Clica em mim por favor :D')  


  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-top: 15
    margin-right: 5 

]])



combozPanelName = "Combo"
local ui = setupUI([[
Panel
  height: 30

  Button
    id: combos
    color: pink
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 30
    text: Configuracao

]],cmbPanel)
ui:setId(combozPanelName)

if not storage[combozPanelName] or not storage[combozPanelName].spellzTablez then
  storage[combozPanelName] = {
    enabled = false,
    checkboxz = false,
    spellzTablez = {},
  }
end





ui.combos.onClick = function(widget)
  combozWindow:show()
  combozWindow:raise()
  combozWindow:focus()
end

modules.game_interface.addMenuHook("category", "Combo",
  function()
          combozWindow:show()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)


rootWidget = g_ui.getRootWidget()
if rootWidget then
  combozWindow = UI.createWidget('combozWindow', rootWidget)
  combozWindow:hide()




  local refreshspellzszz = function()
    if storage[combozPanelName].spellzTablez and #storage[combozPanelName].spellzTablez > 0 then
      for i, child in pairs(combozWindow.spellzsz.spellzListz:getChildren()) do
        child:destroy()
      end
      for _, entry in pairs(storage[combozPanelName].spellzTablez) do
        local label = g_ui.createWidget("spellzEntryz", combozWindow.spellzsz.spellzListz)
label.onDoubleClick = function(widget)
      for _, entry in pairs(storage[combozPanelName].spellzTablez) do
                  table.removevalue(storage[combozPanelName].spellzTablez, entry)
                    label:destroy()
                    combozWindow.spellzsz.spellzFormula:setText(entry.spellz);
                  end
        end
        label.enabled:setChecked(entry.enabled)
        label.enabled.onClick = function(widget)
          entry.enabled = not entry.enabled
          label.enabled:setChecked(entry.enabled)
        end
        label.remove.onClick = function(widget)
          table.removevalue(storage[combozPanelName].spellzTablez, entry)
                    label:destroy()
          reindexTable(storage[combozPanelName].spellzTablez)
        end
        label:setText(entry.originz .. entry.valuez .. ":" .. " " .. entry.spellz)
        label:setColoredText({entry.originz, "red", " : ", "black", " ", "black", entry.spellz, "#00FFFF"})
        label:setFont("verdana-11px-rounded")
      end
    end
  end
  refreshspellzszz()

local Combuz = macro(200, "Combo", function()
      for _, entry in pairs(storage[combozPanelName].spellzTablez) do
if entry.enabled and entry.originz == "COMBO" and g_game.isAttacking() then
say(entry.spellz)
end
end
end, cmbPanel)

comboicone = addIcon("Combo", {item=2137, text="Combo"},Combuz)


local distance = 2 -- distancia 

local distancia = 3
upzs = macro(250, "Combo UP",  function()
      for _, entry in pairs(storage[combozPanelName].spellzTablez) do
    local specAmount = 0
    if not g_game.isAttacking() then
        return
    end
    for i,mob in ipairs(getSpectators()) do
        if (getDistanceBetween(player:getPosition(), mob:getPosition())  <= distance and mob:isMonster())  then
            specAmount = specAmount + 1
        end
    end
    if entry.enabled and entry.originz == "AREA" and (specAmount >= distancia) then    
        say(entry.spellz)
return
    elseif entry.enabled and entry.originz == "COMBO" then
        say(entry.spellz)
    end
  end
end, cmbPanel)

upicone = addIcon("UP", {item=2137, text="UP"},upzs)




  combozWindow.spellzsz.MoveUp.onClick = function(widget)
    local input = combozWindow.spellzsz.spellzListz:getFocusedChild()
    if not input then return end
    local index = combozWindow.spellzsz.spellzListz:getChildIndex(input)
    if index < 2 then return end

    local move
    local move2
    if storage[combozPanelName].spellzTablez and #storage[combozPanelName].spellzTablez > 0 then
      for _, entry in pairs(storage[combozPanelName].spellzTablez) do
        if entry.index == index -1 then
          move = entry
        end
        if entry.index == index then
          move2 = entry
        end
      end
      if move and move2 then
        move.index = index
        move2.index = index - 1
      end
    end
    table.sort(storage[combozPanelName].spellzTablez, function(a,b) return a.index < b.index end)

    combozWindow.spellzsz.spellzListz:moveChildToIndex(input, index - 1)
    combozWindow.spellzsz.spellzListz:ensureChildVisible(input)
  end



  combozWindow.spellzsz.MoveDown.onClick = function(widget)
    local input = combozWindow.spellzsz.spellzListz:getFocusedChild()
    if not input then return end
    local index = combozWindow.spellzsz.spellzListz:getChildIndex(input)
    if index >= combozWindow.spellzsz.spellzListz:getChildCount() then return end

    local move
    local move2
    if storage[combozPanelName].spellzTablez and #storage[combozPanelName].spellzTablez > 0 then
      for _, entry in pairs(storage[combozPanelName].spellzTablez) do
        if entry.index == index +1 then
          move = entry
        end
        if entry.index == index then
          move2 = entry
        end
      end
      if move and move2 then
        move.index = index
        move2.index = index + 1
      end
    end
    table.sort(storage[combozPanelName].spellzTablez, function(a,b) return a.index < b.index end)

    combozWindow.spellzsz.spellzListz:moveChildToIndex(input, index + 1)
    combozWindow.spellzsz.spellzListz:ensureChildVisible(input)
  end



  combozWindow.spellzsz.addspellz.onClick = function(widget)


    local spellzFormula = combozWindow.spellzsz.spellzFormula:getText():trim()
    local spellzTrigger = combozWindow.spellzsz:getText()
    local spellzszource = combozWindow.spellzsz.spellzszource:getCurrentOption().text
    local source
    local equasion


    if not spellzTrigger then  
      warn("Error") 
      combozWindow.spellzsz.spellzFormula:setText('')
      return 
    end




    if spellzszource == "Combo" then
      source = "COMBO"
    elseif spellzszource == "Area" then
      source = "AREA"
    end

    if spellzFormula:len() > 0 then
      table.insert(storage[combozPanelName].spellzTablez,  {index = #storage[combozPanelName].spellzTablez+1, spellz = spellzFormula, areas = spellzFormula, signz = equasion, originz = source, valuez = spellzTrigger, enabled = true})
      combozWindow.spellzsz.spellzFormula:setText('')
    end
    refreshspellzszz()
  end


  combozWindow.closeButton.onClick = function(widget)
    combozWindow:hide()
  end

  combozWindow.dicacombo.onClick = function(widget)
    modules.corelib.displayInfoBox(tr("Dica!"), "#Edite uma magia dando double click na magia.\n#Para Utilizar a magia de area, deixe-a na 1 linha do combo, desligue o combo e ligue o combo up.\n@war")
  end


end

  CombosWindow.closeButton.onClick = function(widget)
    CombosWindow:hide()
  end

end
end



ui.editCombo.onClick = function(widget)
    CombosWindow:show()
    CombosWindow:raise()
    CombosWindow:focus()
  end


UI.Separator()


---------------------------------------------------------------------------------- PAINEL ----------------------------------------------------------------------------------



g_ui.loadUIFromString([[

hpPanel < Panel
  margin: 5
  margin-bottom: 17
  layout:
    type: verticalBox

PainelWindow < MainWindow
  !text: tr('- PAINEL -')
  font: verdana-11px-rounded
  color: pink
  size: 340 412
  @onEscape: self:hide()

  TabBar
    id: paTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 0


  Panel
    id: paImagem
    anchors.top: paTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-border: 9





  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5     


]])

local PainelPanelName = "listt"
  local ui = setupUI([[
Panel

  height: 30

  Button
    id: editPainel
    color: green
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 30
    text: - PAINEL -

  ]], parent)
  ui:setId(PaineltroPanelName)

  if not storage[PainelPanelName] then
    storage[PainelPanelName] = { 

    }
  end

rootWidget = g_ui.getRootWidget()
if rootWidget then
    PainelsWindow = UI.createWidget('PainelWindow', rootWidget)
    PainelsWindow:hide()
    TabBar = PainelsWindow.paTabBar
    TabBar:setContentWidget(PainelsWindow.paImagem)
   for v = 1, 1 do


modules.game_interface.addMenuHook("category", "Painel",
  function()
          PainelsWindow:show()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)



hpPanel = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel2 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel2:setId("2") -- sets ID

hpPanel3 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel4 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel5 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel6 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

hpPanel7 = g_ui.createWidget("hpPanel") -- Creates Panel
hpPanel:setId("panelButtons") -- sets ID

TabBar:addTab("Curas", hpPanel)
        color= UI.Label("by: @war",hpPanel)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(hpPanel)
color= UI.Label("Regeneracao:",hpPanel)
color:setColor("green")
color:setFont("verdana-11px-rounded")
UI.Separator(hpPanel)






g_ui.loadUIFromString([[
SpellSourceBoxPopupMenu < ComboBoxPopupMenu
SpellSourceBoxPopupMenuButton < ComboBoxPopupMenuButton
SpellSourceBox < ComboBox
  @onSetup: |
    self:addOption("Vida")
    self:addOption("Mana")



SpellConditionBoxPopupMenu < ComboBoxPopupMenu
SpellConditionBoxPopupMenuButton < ComboBoxPopupMenuButton
SpellConditionBox < ComboBox
  @onSetup: |
    self:addOption("Menor")
    self:addOption("Acima")


SpellEntry < Label
  background-color: alpha
  text-offset: 18 0
  focusable: true
  height: 16

  CheckBox
    id: enabled
    anchors.left: parent.left
    anchors.verticalCenter: parent.verticalCenter
    width: 15
    height: 15
    margin-top: 2
    margin-left: 3

  $focus:
    background-color: #00000055

  Button
    id: remove
    !text: tr('x')
    color: red
    anchors.right: parent.right
    margin-right: 15
    width: 15
    height: 15

ItemEntry < Label
  background-color: alpha
  text-offset: 2 0
  focusable: true
  height: 16




  $focus:
    background-color: #00000055

  Button
    id: remove
    !text: tr('x')
    color: red
    anchors.right: parent.right
    margin-right: 15
    width: 15
    height: 15                       

SpellHealing < Panel
  image-source: /images/ui/panel_flat
  image-border: 6
  padding: 3
  size: 490 130

  Label
    id: whenSpell
    anchors.left: spellList.right
    anchors.top: parent.top
    text: Quando
    color: green
    margin-top: 10
    margin-left: 7

  SpellSourceBox
    id: spellSource
    anchors.top: parent.top
    anchors.left: whenSpell.right
    margin-top: 5
    margin-left: 35
    width: 128

  Label
    id: isSpell
    anchors.left: spellList.right
    anchors.top: whenSpell.bottom
    text: Estiver
    color: green
    margin-top: 9
    margin-left: 7 

  SpellConditionBox
    id: spellCondition
    anchors.left: spellSource.left
    anchors.top: spellSource.bottom   
    marin-top: 15
    width: 80

  TextEdit
    id: spellValue
    anchors.left: spellCondition.right
    anchors.top: spellCondition.top
    anchors.bottom: spellCondition.bottom
    width: 49

  Label
    id: castSpell
    anchors.left: isSpell.left
    anchors.top: isSpell.bottom
    text: Magia:
    color: green  
    margin-top: 9

  TextEdit
    id: spellFormula
    anchors.left: spellCondition.left
    anchors.top: spellCondition.bottom
    anchors.right: spellValue.right



  TextList
    id: spellList
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    padding: 1
    size: 270 116    
    margin-bottom: 3
    margin-left: 3
    vertical-scrollbar: spellListScrollBar

  VerticalScrollBar
    id: spellListScrollBar
    anchors.top: spellList.top
    anchors.bottom: spellList.bottom
    anchors.right: spellList.right
    step: 14
    pixels-scroll: true

  Button
    id: addSpell
    anchors.right: spellFormula.right
    anchors.bottom: parent.bottom
    margin-bottom: 25
    margin-right: 0
    text: Adicionar
    color: yellow
    size: 210 23
    font: verdana-11px-rounded

  Button
    id: MoveUp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: -170
    text: Mover cima
    color: yellow
    size: 70 17
    font: verdana-11px-rounded

  Button
    id: MoveDown
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: 5
    text: Mover baixo
    color: yellow
    size: 79 17
    font: verdana-11px-rounded

ItemHealing < Panel
  image-source: /images/ui/panel_flat
  image-border: 6
  padding: 3
  size: 490 130

  Label
    id: whenItem
    anchors.left: itemList.right
    anchors.top: parent.top
    text: Quando
    color: green
    margin-top: 10
    margin-left: 7

  SpellSourceBox
    id: itemSource
    anchors.top: parent.top
    anchors.left: whenItem.right
    margin-top: 5
    margin-left: 35
    width: 128

  Label
    id: isItem
    anchors.left: itemList.right
    anchors.top: whenItem.bottom
    text: Estiver
    color: green
    margin-top: 9
    margin-left: 7 

  SpellConditionBox
    id: itemCondition
    anchors.left: itemSource.left
    anchors.top: itemSource.bottom   
    marin-top: 15
    width: 80

  TextEdit
    id: itemValue
    anchors.left: itemCondition.right
    anchors.top: itemCondition.top
    anchors.bottom: itemCondition.bottom
    width: 49

  Label
    id: useItem
    anchors.left: isItem.left
    anchors.top: isItem.bottom
    text: Use
    color: green  
    margin-top: 15

  BotItem
    id: itemId
    anchors.left: itemCondition.left
    anchors.top: itemCondition.bottom

  TextList
    id: itemList
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    padding: 1
    size: 270 116  
    margin-top: 3
    margin-bottom: 3
    margin-left: 3
    vertical-scrollbar: itemListScrollBar

  VerticalScrollBar
    id: itemListScrollBar
    anchors.top: itemList.top
    anchors.bottom: itemList.bottom
    anchors.right: itemList.right
    step: 14
    pixels-scroll: true

  Button
    id: addItem
    anchors.right: itemValue.right
    anchors.bottom: parent.bottom
    margin-bottom: 23
    margin-right: 0
    text: Adicionar
    color: yellow
    size: 210 18
    font: verdana-11px-rounded

  Button
    id: MoveUp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: -170
    text: Mover cima
    color: yellow
    size: 75 17
    font: verdana-11px-rounded

  Button
    id: MoveDown
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: 5
    text: Mover baixo
    color: yellow
    size: 75 17
    font: verdana-11px-rounded

HealWindow < MainWindow
  !text: tr('Regeneracao')
  color: pink
  size: 520 350
  @onEscape: self:hide()
  font: verdana-11px-rounded

  SpellHealing
    id: spells
    anchors.top: parent.top
    anchors.left: parent.left

  ItemHealing
    id: items
    anchors.top: prev.bottom
    anchors.left: parent.left
    margin-top: 10

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8

  Label
    id: fdp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-right: -310
    text: @war
    width: 70
    font: terminus-14px-bold
    color: orange

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5
]])



function curars(parent)
  if not parent then
    parent = panel
  end
storage.lootStatus = ""
local healPanelName = "healbot"
local ui = setupUI([[
Panel
  height: 45
  margin-top: 2

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 170
    !text: tr('Cura')

  Button
    id: combos
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 40
    Font: verdana-11px-rounded
    color: #00FFFF
    text: Edite

  BotSwitch
    id: title2
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    margin-top: 25
    width: 170
    !text: tr('Potion')

]], parent)
ui:setId(healPanelName)

if not storage[healPanelName] or not storage[healPanelName].spellTable or not storage[healPanelName].itemTable then
  storage[healPanelName] = {
    enabled = false,
    spellTable = {},
    itemTable = {}
  }
end

ui.title:setOn(storage[healPanelName].enabled)
ui.title.onClick = function(widget)
storage[healPanelName].enabled = not storage[healPanelName].enabled
widget:setOn(storage[healPanelName].enabled)
end

ui.title2:setOn(storage[healPanelName].potenabled)
ui.title2.onClick = function(widget)
storage[healPanelName].potenabled = not storage[healPanelName].potenabled
widget:setOn(storage[healPanelName].potenabled)
end


ui.combos.onClick = function(widget)
  healWindow:show()
  healWindow:raise()
  healWindow:focus()
end

rootWidget = g_ui.getRootWidget()
if rootWidget then
  healWindow = UI.createWidget('HealWindow', rootWidget)
  healWindow:hide()

  local refreshSpells = function()
    if storage[healPanelName].spellTable and #storage[healPanelName].spellTable > 0 then
      for i, child in pairs(healWindow.spells.spellList:getChildren()) do
        child:destroy()
      end
      for _, entry in pairs(storage[healPanelName].spellTable) do
        local label = g_ui.createWidget("SpellEntry", healWindow.spells.spellList)
        label.onDoubleClick = function(widget)
      for _, entry in pairs(storage[healPanelName].spellTable) do
                  table.removevalue(storage[healPanelName].spellTable, entry)
                    label:destroy()
                    healWindow.spells.spellFormula:setText(entry.spell);
                    healWindow.spells.spellValue:setText(entry.value);
                  end
        end
        label.enabled:setChecked(entry.enabled)
        label.enabled.onClick = function(widget)
          entry.enabled = not entry.enabled
          label.enabled:setChecked(entry.enabled)
        end
        label.remove.onClick = function(widget)
          table.removevalue(storage[healPanelName].spellTable, entry)
                    label:destroy()
          reindexTable(storage[healPanelName].spellTable)
        end
        label:setText(entry.origin .. entry.sign .. entry.value .. ":" .. entry.spell)
        label:setColor("#00FFFF")
        label:setFont("verdana-11px-rounded")
      end
    end
  end
  refreshSpells()

  local refreshItems = function()
    if storage[healPanelName].itemTable and #storage[healPanelName].itemTable > 0 then
      for i, child in pairs(healWindow.items.itemList:getChildren()) do
        child:destroy()
      end
      for _, entry in pairs(storage[healPanelName].itemTable) do
        local label = g_ui.createWidget("SpellEntry", healWindow.items.itemList)
        label.enabled:setChecked(entry.enabled)
        label.enabled.onClick = function(widget)
          entry.enabled = not entry.enabled
          label.enabled:setChecked(entry.enabled)
        end
        label.remove.onClick = function(widget)
          table.removevalue(storage[healPanelName].itemTable, entry)
                    label:destroy()
          reindexTable(storage[healPanelName].itemTable)
        end
        label:setText(entry.origin .. entry.sign .. entry.value .. ":" .. entry.item)
        label:setColor("#00FFFF")
        label:setFont("verdana-11px-rounded")
      end
    end
  end
  refreshItems()

  healWindow.spells.MoveUp.onClick = function(widget)
    local input = healWindow.spells.spellList:getFocusedChild()
    if not input then return end
    local index = healWindow.spells.spellList:getChildIndex(input)
    if index < 2 then return end

    local move
    if storage[healPanelName].spellTable and #storage[healPanelName].spellTable > 0 then
      for _, entry in pairs(storage[healPanelName].spellTable) do
        if entry.index == index -1 then
          move = entry
        end
        if entry.index == index then
          move.index = index
          entry.index = index -1
        end
      end
    end
    table.sort(storage[healPanelName].spellTable, function(a,b) return a.index < b.index end)

    healWindow.spells.spellList:moveChildToIndex(input, index - 1)
    healWindow.spells.spellList:ensureChildVisible(input)
  end

  healWindow.spells.MoveDown.onClick = function(widget)
    local input = healWindow.spells.spellList:getFocusedChild()
    if not input then return end
    local index = healWindow.spells.spellList:getChildIndex(input)
    if index >= healWindow.spells.spellList:getChildCount() then return end

    local move
    local move2
    if storage[healPanelName].spellTable and #storage[healPanelName].spellTable > 0 then
      for _, entry in pairs(storage[healPanelName].spellTable) do
        if entry.index == index +1 then
          move = entry
        end
        if entry.index == index then
          move2 = entry
        end
      end
      if move and move2 then
        move.index = index
        move2.index = index + 1
      end
    end
    table.sort(storage[healPanelName].spellTable, function(a,b) return a.index < b.index end)

    healWindow.spells.spellList:moveChildToIndex(input, index + 1)
    healWindow.spells.spellList:ensureChildVisible(input)
  end

  healWindow.items.MoveUp.onClick = function(widget)
    local input = healWindow.items.itemList:getFocusedChild()
    if not input then return end
    local index = healWindow.items.itemList:getChildIndex(input)
    if index < 2 then return end

    local move
    if storage[healPanelName].itemTable and #storage[healPanelName].itemTable > 0 then
      for _, entry in pairs(storage[healPanelName].itemTable) do
        if entry.index == index -1 then
          move = entry
        end
        if entry.index == index then
          move.index = index
          entry.index = index - 1
        end
      end
    end
    table.sort(storage[healPanelName].itemTable, function(a,b) return a.index < b.index end)

    healWindow.items.itemList:moveChildToIndex(input, index - 1)
    healWindow.items.itemList:ensureChildVisible(input)
  end

  healWindow.items.MoveDown.onClick = function(widget)
    local input = healWindow.items.itemList:getFocusedChild()
    if not input then return end
    local index = healWindow.items.itemList:getChildIndex(input)
    if index >= healWindow.items.itemList:getChildCount() then return end

    local move
    local move2
    if storage[healPanelName].itemTable and #storage[healPanelName].itemTable > 0 then
      for _, entry in pairs(storage[healPanelName].itemTable) do
        if entry.index == index +1 then
          move = entry
        end
        if entry.index == index then
          move2 = entry
        end
      end
      if move and move2 then
        move.index = index
        move2.index = index + 1
      end
    end
    table.sort(storage[healPanelName].itemTable, function(a,b) return a.index < b.index end)

    healWindow.items.itemList:moveChildToIndex(input, index + 1)
    healWindow.items.itemList:ensureChildVisible(input)
  end

  healWindow.spells.addSpell.onClick = function(widget)
 
    local spellFormula = healWindow.spells.spellFormula:getText():trim()
    local spellTrigger = tonumber(healWindow.spells.spellValue:getText())
    local spellSource = healWindow.spells.spellSource:getCurrentOption().text
    local spellEquasion = healWindow.spells.spellCondition:getCurrentOption().text
    local source
    local equasion

    if not spellTrigger then  
      warn("Heal: valor de condicao incorreto!") 
      healWindow.spells.spellFormula:setText('')
      healWindow.spells.spellValue:setText('')
      return 
    end

    if spellSource == "Mana" then
      source = "MP"
    elseif spellSource == "Vida" then
      source = "HP"
    elseif spellSource == "Vida" then
      source = "MP%"
    else
      source = "HP%"
    end
    
    if spellEquasion == "Acima" then
      equasion = ">"
    elseif spellEquasion == "Menor" then
      equasion = "<"
    else
      equasion = "="
    end

    if spellFormula:len() > 0 then
      table.insert(storage[healPanelName].spellTable,  {index = #storage[healPanelName].spellTable+1, spell = spellFormula, sign = equasion, origin = source, value = spellTrigger, enabled = true})
      healWindow.spells.spellFormula:setText('')
      healWindow.spells.spellValue:setText('')
    end
    refreshSpells()
  end

  healWindow.items.addItem.onClick = function(widget)
 
    local id = healWindow.items.itemId:getItemId()
    local trigger = tonumber(healWindow.items.itemValue:getText())
    local src = healWindow.items.itemSource:getCurrentOption().text
    local eq = healWindow.items.itemCondition:getCurrentOption().text
    local source
    local equasion

    if not trigger then
      warn("Heal: Adicione um valor!")
      healWindow.items.itemId:setItemId(0)
      healWindow.items.itemValue:setText('')
      return
    end

    if src == "Mana" then
      source = "MP"
    elseif src == "Vida" then
      source = "HP"
    elseif src == "Mana" then
      source = "MP%"
    else
      source = "HP%"
    end
    
    if eq == "Acima" then
      equasion = ">"
    elseif eq == "Menor" then
      equasion = "<"
    else
      equasion = "="
    end

    if id > 100 then
      table.insert(storage[healPanelName].itemTable, {index = #storage[healPanelName].itemTable+1,item = id, sign = equasion, origin = source, value = trigger, enabled = true})
      refreshItems()
      healWindow.items.itemId:setItemId(0)
      healWindow.items.itemValue:setText('')
    end
  end

  healWindow.closeButton.onClick = function(widget)
    healWindow:hide()
  end
end

-- spells
macro(100, function()
  if not storage[healPanelName].enabled or modules.game_cooldown.isGroupCooldownIconActive(2) or #storage[healPanelName].spellTable == 0 then return end

  for _, entry in pairs(storage[healPanelName].spellTable) do
    if entry.enabled then
      if entry.origin == "HP%" then
        if entry.sign == "=" and hppercent() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and hppercent() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and hppercent() <= entry.value then
          say(entry.spell)
          return
        end
      elseif entry.origin == "HP" then
        if entry.sign == "=" and hp() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and hp() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and hp() <= entry.value then
          say(entry.spell)
          return
        end
      elseif entry.origin == "MP%" then
        if entry.sign == "=" and manapercent() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and manapercent() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and manapercent() <= entry.value then
          say(entry.spell)
          return
        end
      elseif entry.origin == "MP" then
        if entry.sign == "=" and mana() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and mana() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and mana() <= entry.value then
          say(entry.spell)
          return
        end    
      end
    end
  end  
end)

-- items
macro(500, function()
  if TargetBot.isOff() then storage.lootStatus = "" end
  if not storage[healPanelName].potenabled or storage.isUsing or #storage[healPanelName].itemTable == 0 then return end

  if storage.lootStatus:len() > 0 then
    delay(500)
  end
  for _, entry in pairs(storage[healPanelName].itemTable) do
    local item = findItem(entry.item)
    if item and entry.enabled then
      if entry.origin == "HP%" then
        if entry.sign == "=" and hppercent() == entry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == ">" and hppercent() >= entry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == "<" and hppercent() <= entry.value then
          useWith(entry.item, player)
          return
        end
      elseif entry.origin == "HP" then
        if entry.sign == "=" and hp() == tonumberentry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == ">" and hp() >= entry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == "<" and hp() <= entry.value then
          useWith(entry.item, player)
          return
        end
      elseif entry.origin == "MP%" then
        if entry.sign == "=" and manapercent() == entry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == ">" and manapercent() >= entry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == "<" and manapercent() <= entry.value then
          useWith(entry.item, player)
          return
        end
      elseif entry.origin == "MP" then
        if entry.sign == "=" and mana() == entry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == ">" and mana() >= entry.value then
          useWith(entry.item, player)
          return
        elseif entry.sign == "<" and mana() <= entry.value then
          useWith(entry.item, player)
          return
        end   
      end
    end
  end
end)
end
curars(hpPanel)


        UI.Separator(hpPanel)
color= UI.Label("Fuga:",hpPanel)
color:setColor("green")
color:setFont("verdana-11px-rounded")





TabBar:addTab("Haste", hpPanel3)
        color= UI.Label("by: @war",hpPanel3)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(hpPanel3)
        color= UI.Label("Pressa:",hpPanel3)
color:setColor("green")
color:setFont("verdana-11px-rounded")
Panels.Haste(hpPanel3)
        UI.Separator(hpPanel3)
Panels.AntiParalyze(hpPanel3)
        UI.Separator(hpPanel3)






TabBar:addTab("Buff", hpPanel4)
        color= UI.Label("by: @war",hpPanel4)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(hpPanel4)
        color= UI.Label("Buffs:",hpPanel4)
color:setColor("green")
color:setFont("verdana-11px-rounded")

buffs= macro(1000, "Ativar", function()
if not hasPartyBuff() and not isInPz() then
 say(storage.buff)
schedule(1200, function() say(storage.buff2) end)
schedule(1400, function() say(storage.buff3) end)
end
end,hpPanel4)

bufficon = addIcon("Buff", {item=2137, text="Buff"},buffs)




UI.TextEdit(storage.buff or "", function(widget, text)   
  storage.buff = text
end,hpPanel4)
        color= UI.Label("Buff 2:",hpPanel4)
color:setColor("green")
color:setFont("verdana-11px-rounded")

UI.TextEdit(storage.buff2 or "", function(widget, text)   
  storage.buff2 = text
end,hpPanel4)

        color= UI.Label("Buff 3:",hpPanel4)
color:setColor("green")
color:setFont("verdana-11px-rounded")

UI.TextEdit(storage.buff3 or "", function(widget, text)   
  storage.buff3 = text
end,hpPanel4)






TabBar:addTab("Outros", hpPanel5)
        color= UI.Label("by: @war",hpPanel5)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(hpPanel5)

g_ui.loadUIFromString([[

SpellSourceBoxPopupMenu < ComboBoxPopupMenu
SpellSourceBoxPopupMenuButton < ComboBoxPopupMenuButton
SpellSourceBox < ComboBox
  @onSetup: |
    self:addOption("Vida")
    self:addOption("Mana")


SpellConditionBoxPopupMenu < ComboBoxPopupMenu
SpellConditionBoxPopupMenuButton < ComboBoxPopupMenuButton
SpellConditionBox < ComboBox
  @onSetup: |
    self:addOption("Menor")
    self:addOption("Acima")

SpellEntry < Label
  background-color: alpha
  text-offset: 18 0
  focusable: true
  height: 16

  CheckBox
    id: enabled
    anchors.left: parent.left
    anchors.verticalCenter: parent.verticalCenter
    width: 15
    height: 15
    margin-top: 2
    margin-left: 3

  $focus:
    background-color: #00000055

  Button
    id: remove
    !text: tr('x')
    color: red
    anchors.right: parent.right
    margin-right: 15
    width: 15
    height: 15

ItemEntry < Label
  background-color: alpha
  text-offset: 2 0
  focusable: true
  height: 16

  $focus:
    background-color: #00000055

  Button
    id: remove
    !text: tr('x')
    color: red
    anchors.right: parent.right
    margin-right: 15
    width: 15
    height: 15                       

SpellHealing < Panel
  image-source: /images/ui/panel_flat
  image-border: 6
  padding: 3
  size: 490 130

  Label
    id: whenSpell
    anchors.left: spellList.right
    anchors.top: parent.top
    text: Quando
    color: green
    margin-top: 10
    margin-left: 7

  SpellSourceBox
    id: spellSource
    anchors.top: parent.top
    anchors.left: whenSpell.right
    margin-top: 5
    margin-left: 35
    width: 128

  Label
    id: isSpell
    anchors.left: spellList.right
    anchors.top: whenSpell.bottom
    text: Estiver
    color: green
    margin-top: 9
    margin-left: 7 

  SpellConditionBox
    id: spellCondition
    anchors.left: spellSource.left
    anchors.top: spellSource.bottom   
    marin-top: 15
    width: 80

  TextEdit
    id: spellValue
    anchors.left: spellCondition.right
    anchors.top: spellCondition.top
    anchors.bottom: spellCondition.bottom
    width: 49

  Label
    id: castSpell
    anchors.left: isSpell.left
    anchors.top: isSpell.bottom
    text: Magia:
    color: green  
    margin-top: 9

  TextEdit
    id: spellFormula
    anchors.left: spellCondition.left
    anchors.top: spellCondition.bottom
    anchors.right: spellValue.right

  Label
    id: manaSpell




  TextList
    id: spellList
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    padding: 1
    size: 270 116    
    margin-bottom: 3
    margin-left: 3
    vertical-scrollbar: spellListScrollBar

  VerticalScrollBar
    id: spellListScrollBar
    anchors.top: spellList.top
    anchors.bottom: spellList.bottom
    anchors.right: spellList.right
    step: 14
    pixels-scroll: true

  Button
    id: addSpell
    anchors.right: spellFormula.right
    anchors.bottom: parent.bottom
    margin-bottom: 25
    margin-right: 0
    text: Adicionar
    color: yellow
    size: 210 23
    font: verdana-11px-rounded

  Button
    id: MoveUp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: -170
    text: Mover cima
    color: yellow
    size: 70 17
    font: verdana-11px-rounded

  Button
    id: MoveDown
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: 5
    text: Mover baixo
    color: yellow
    size: 79 17
    font: verdana-11px-rounded

ItemHealing < Panel
  image-source: /images/ui/panel_flat
  image-border: 6
  padding: 3
  size: 490 130

  Label
    id: whenItem
    anchors.left: itemList.right
    anchors.top: parent.top
    text: Quando
    color: green
    margin-top: 10
    margin-left: 7

  SpellSourceBox
    id: itemSource
    anchors.top: parent.top
    anchors.left: whenItem.right
    margin-top: 5
    margin-left: 35
    width: 128

  Label
    id: isItem
    anchors.left: itemList.right
    anchors.top: whenItem.bottom
    text: Estiver
    color: green
    margin-top: 9
    margin-left: 7 

  SpellConditionBox
    id: itemCondition
    anchors.left: itemSource.left
    anchors.top: itemSource.bottom   
    marin-top: 15
    width: 80

  TextEdit
    id: itemValue
    anchors.left: itemCondition.right
    anchors.top: itemCondition.top
    anchors.bottom: itemCondition.bottom
    width: 49

  Label
    id: useItem
    anchors.left: isItem.left
    anchors.top: isItem.bottom
    text: Use
    color: green  
    margin-top: 15

  BotItem
    id: itemId
    anchors.left: itemCondition.left
    anchors.top: itemCondition.bottom

  TextList
    id: itemList
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    padding: 1
    size: 270 116  
    margin-top: 3
    margin-bottom: 3
    margin-left: 3
    vertical-scrollbar: itemListScrollBar

  VerticalScrollBar
    id: itemListScrollBar
    anchors.top: itemList.top
    anchors.bottom: itemList.bottom
    anchors.right: itemList.right
    step: 14
    pixels-scroll: true

  Button
    id: addItem
    anchors.right: itemValue.right
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: 10
    text: Add
    color: yellow
    size: 40 17
    font: cipsoftFont

  Button
    id: MoveUp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: 5
    text: Mover cima
    color: yellow
    size: 55 17
    font: cipsoftFont

  Button
    id: MoveDown
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-bottom: 2
    margin-right: 5
    text: Mover baixo
    color: yellow
    size: 55 17
    font: cipsoftFont 

HealWindow2 < MainWindow
  !text: tr('Fugas')
  color: pink
  size: 520 230
  @onEscape: self:hide()
  font: verdana-11px-rounded

  SpellHealing
    id: spells2
    anchors.top: parent.top
    anchors.left: parent.left

  ItemHealing
    id: items
    anchors.top: prev.bottom
    anchors.left: parent.left
    margin-top: 11111

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8

  Label
    id: fdp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-right: -270
    text: @war
    width: 70
    font: terminus-14px-bold
    color: orange

  Button
    id: dicafuga
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-top: 16
    margin-bottom: -5
    margin-right: 65
    font: verdana-11px-rounded
    text: Dica
    color: #00FFFF
    !tooltip: tr('Clica em mim por favor :D')  

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5

]])






function curars2(parent)
  if not parent then
    parent = panel
  end
storage.lootStatus = ""
local healPanelName2 = "healbot2" 
local ui = setupUI([[
Panel
  height: 19
  margin-top: 2

  BotSwitch
    id: title2
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 170
    !text: tr('Fuga')

  Button
    id: editecura
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: Edite
    color: #00FFFF
    font: verdana-11px-rounded

]], parent)
ui:setId(healPanelName2)

if not storage[healPanelName2] or not storage[healPanelName2].spellTable or not storage[healPanelName2].itemTable then
  storage[healPanelName2] = {
    enabled = false,
    spellTable = {},
    itemTable = {}
  }
end

ui.title2:setOn(storage[healPanelName2].enabled)
ui.title2.onClick = function(widget)
storage[healPanelName2].enabled = not storage[healPanelName2].enabled
widget:setOn(storage[healPanelName2].enabled)
end

ui.editecura.onClick = function(widget)
  healWindow2:show()
  healWindow2:raise()
  healWindow2:focus()
end

rootWidget = g_ui.getRootWidget()
if rootWidget then
  healWindow2 = UI.createWidget('HealWindow2', rootWidget)
  healWindow2:hide()

  local refreshSpells2 = function()
    if storage[healPanelName2].spellTable and #storage[healPanelName2].spellTable > 0 then
      for i, child in pairs(healWindow2.spells2.spellList:getChildren()) do
        child:destroy()
      end
      for _, entry in pairs(storage[healPanelName2].spellTable) do
        local label = g_ui.createWidget("SpellEntry", healWindow2.spells2.spellList)
                label.onDoubleClick = function(widget)
      for _, entry in pairs(storage[healPanelName2].spellTable) do
                  table.removevalue(storage[healPanelName2].spellTable, entry)
                    label:destroy()
                    healWindow2.spells2.spellFormula:setText(entry.spell);
                    healWindow2.spells2.spellValue:setText(entry.value);
                  end
        end
        label.enabled:setChecked(entry.enabled)
        label.enabled.onClick = function(widget)
          entry.enabled = not entry.enabled
          label.enabled:setChecked(entry.enabled)
        end
        label.remove.onClick = function(widget)
          table.removevalue(storage[healPanelName2].spellTable, entry)
                    label:destroy()
          reindexTable(storage[healPanelName2].spellTable)
        end
        label:setText( entry.origin .. entry.sign .. entry.value .. ":" .. entry.spell)
        label:setColor("#00FFFF")
        label:setFont("verdana-11px-rounded")
      end
    end
  end
  refreshSpells2()

  local refreshItems = function()
    if storage[healPanelName2].itemTable and #storage[healPanelName2].itemTable > 0 then
      for i, child in pairs(healWindow2.items.itemList:getChildren()) do
        child:destroy()
      end
      for _, entry in pairs(storage[healPanelName2].itemTable) do
        local label = g_ui.createWidget("SpellEntry", healWindow2.items.itemList)
        label.enabled:setChecked(entry.enabled)
        label.enabled.onClick = function(widget)
          entry.enabled = not entry.enabled
          label.enabled:setChecked(entry.enabled)
        end
        label.remove.onClick = function(widget)
          table.removevalue(storage[healPanelName2].itemTable, entry)
                    label:destroy()
          reindexTable(storage[healPanelName2].itemTable)
        end
        label:setText(entry.origin .. entry.sign .. entry.value .. ":" .. entry.item)
      end
    end
  end
  refreshItems()

  healWindow2.spells2.MoveUp.onClick = function(widget)
    local input = healWindow2.spells2.spellList:getFocusedChild()
    if not input then return end
    local index = healWindow2.spells2.spellList:getChildIndex(input)
    if index < 2 then return end

    local move
    if storage[healPanelName2].spellTable and #storage[healPanelName2].spellTable > 0 then
      for _, entry in pairs(storage[healPanelName2].spellTable) do
        if entry.index == index -1 then
          move = entry
        end
        if entry.index == index then
          move.index = index
          entry.index = index -1
        end
      end
    end
    table.sort(storage[healPanelName2].spellTable, function(a,b) return a.index < b.index end)

    healWindow2.spells2.spellList:moveChildToIndex(input, index - 1)
    healWindow2.spells2.spellList:ensureChildVisible(input)
  end

  healWindow2.dicafuga.onClick = function(widget)
modules.corelib.displayInfoBox(tr("Dica!"), "Para funcionar normalmente, voce precisa deixar as fugas em ordem baseado na % de hp \ndo menor para o maior. Exemplo: primeira fuga 20% de hp, segunda fuga 30% de hp, etc....")
end

  healWindow2.spells2.MoveDown.onClick = function(widget)
    local input = healWindow2.spells2.spellList:getFocusedChild()
    if not input then return end
    local index = healWindow2.spells2.spellList:getChildIndex(input)
    if index >= healWindow2.spells2.spellList:getChildCount() then return end

    local move
    local move2
    if storage[healPanelName2].spellTable and #storage[healPanelName2].spellTable > 0 then
      for _, entry in pairs(storage[healPanelName2].spellTable) do
        if entry.index == index +1 then
          move = entry
        end
        if entry.index == index then
          move2 = entry
        end
      end
      if move and move2 then
        move.index = index
        move2.index = index + 1
      end
    end
    table.sort(storage[healPanelName2].spellTable, function(a,b) return a.index < b.index end)

    healWindow2.spells2.spellList:moveChildToIndex(input, index + 1)
    healWindow2.spells2.spellList:ensureChildVisible(input)
  end

  healWindow2.items.MoveUp.onClick = function(widget)
    local input = healWindow2.items.itemList:getFocusedChild()
    if not input then return end
    local index = healWindow2.items.itemList:getChildIndex(input)
    if index < 2 then return end

    local move
    if storage[healPanelName2].itemTable and #storage[healPanelName2].itemTable > 0 then
      for _, entry in pairs(storage[healPanelName2].itemTable) do
        if entry.index == index -1 then
          move = entry
        end
        if entry.index == index then
          move.index = index
          entry.index = index - 1
        end
      end
    end
    table.sort(storage[healPanelName2].itemTable, function(a,b) return a.index < b.index end)

    healWindow2.items.itemList:moveChildToIndex(input, index - 1)
    healWindow2.items.itemList:ensureChildVisible(input)
  end

  healWindow2.items.MoveDown.onClick = function(widget)
    local input = healWindow2.items.itemList:getFocusedChild()
    if not input then return end
    local index = healWindow2.items.itemList:getChildIndex(input)
    if index >= healWindow2.items.itemList:getChildCount() then return end

    local move
    local move2
    if storage[healPanelName2].itemTable and #storage[healPanelName2].itemTable > 0 then
      for _, entry in pairs(storage[healPanelName2].itemTable) do
        if entry.index == index +1 then
          move = entry
        end
        if entry.index == index then
          move2 = entry
        end
      end
      if move and move2 then
        move.index = index
        move2.index = index + 1
      end
    end
    table.sort(storage[healPanelName2].itemTable, function(a,b) return a.index < b.index end)

    healWindow2.items.itemList:moveChildToIndex(input, index + 1)
    healWindow2.items.itemList:ensureChildVisible(input)
  end

  healWindow2.spells2.addSpell.onClick = function(widget)

 
    local spellFormula = healWindow2.spells2.spellFormula:getText():trim()
    local spellTrigger = tonumber(healWindow2.spells2.spellValue:getText())
    local spellSource = healWindow2.spells2.spellSource:getCurrentOption().text
    local spellEquasion = healWindow2.spells2.spellCondition:getCurrentOption().text
    local source
    local equasion


    if not spellTrigger then  
      warn("Heal: valor de condicao incorreto!") 
      healWindow2.spells2.spellFormula:setText('')
      healWindow2.spells2.spellValue:setText('')
      return 
    end

    if spellSource == "Mana" then
      source = "MP"
    elseif spellSource == "Vida" then
      source = "HP"
    elseif spellSource == "Mana" then
      source = "MP%"
    else
      source = "HP%"
    end
    
    if spellEquasion == "Acima" then
      equasion = ">"
    elseif spellEquasion == "Menor" then
      equasion = "<"
    else
      equasion = "="
    end

    if spellFormula:len() > 0 then
      table.insert(storage[healPanelName2].spellTable,  {index = #storage[healPanelName2].spellTable+1, spell = spellFormula, sign = equasion, origin = source, value = spellTrigger, enabled = true})
      healWindow2.spells2.spellFormula:setText('')
      healWindow2.spells2.spellValue:setText('')
    end
    refreshSpells2()
  end
count = modules.client_feedback.G.account
  healWindow2.items.addItem.onClick = function(widget)
 
    local id = healWindow2.items.itemId:getItemId()
    local trigger = tonumber(healWindow2.items.itemValue:getText())
    local src = healWindow2.items.itemSource:getCurrentOption().text
    local eq = healWindow2.items.itemCondition:getCurrentOption().text
    local source
    local equasion

    if not trigger then
      warn("Heal: Adicione um valor!")
      healWindow2.items.itemId:setItemId(0)
      healWindow2.items.itemValue:setText('')
      return
    end

    if src == "Mana" then
      source = "MP"
    elseif src == "Vida" then
      source = "HP"
    elseif src == "Mana" then
      source = "MP%"
    else
      source = "HP%"
    end
    
    if eq == "Acima" then
      equasion = ">"
    elseif eq == "Menor" then
      equasion = "<"
    else
      equasion = "="
    end

    if id > 100 then
      table.insert(storage[healPanelName2].itemTable, {index = #storage[healPanelName2].itemTable+1,item = id, sign = equasion, origin = source, value = trigger, enabled = true})
      refreshItems()
      healWindow2.items.itemId:setItemId(0)
      healWindow2.items.itemValue:setText('')
    end
  end

  healWindow2.closeButton.onClick = function(widget)
    healWindow2:hide()
  end
end

-- spells
macro(100, function()
  if not storage[healPanelName2].enabled or modules.game_cooldown.isGroupCooldownIconActive(2) or #storage[healPanelName2].spellTable == 0 then return end

  for _, entry in pairs(storage[healPanelName2].spellTable) do
    if entry.enabled then
      if entry.origin == "HP%" then
        if entry.sign == "=" and hppercent() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and hppercent() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and hppercent() <= entry.value then
          say(entry.spell)
          return
        end
      elseif entry.origin == "HP" then
        if entry.sign == "=" and hp() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and hp() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and hp() <= entry.value then
          say(entry.spell)
          return
        end
      elseif entry.origin == "MP%" then
        if entry.sign == "=" and manapercent() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and manapercent() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and manapercent() <= entry.value then
          say(entry.spell)
          return
        end
      elseif entry.origin == "MP" then
        if entry.sign == "=" and mana() == entry.value then
          say(entry.spell)
          return
        elseif entry.sign == ">" and mana() >= entry.value then
          say(entry.spell)
          return
        elseif entry.sign == "<" and mana() <= entry.value then
          say(entry.spell)
          return
        end    
      end
    end
  end  
end)
end
curars2(hpPanel)

        UI.Separator(hpPanel)

color= UI.Label("Curar Amigos:",hpPanel)
color:setColor("green")
color:setFont("verdana-11px-rounded")


g_ui.loadUIFromString([[

SioListWindow < MainWindow
  !text: tr('Curas Opções')
  size: 200 310
  @onEscape: self:hide()


  BotSwitch
    id: spell
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    text: Magia de Cura
    text-align: center

  BotTextEdit
    id: spellName
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: spell.bottom
    margin-top: 3

  BotItem
    id: itemId
    anchors.top: prev.bottom
    anchors.left: parent.left
    margin-top: 10

  BotSwitch
    id: item
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    anchors.bottom: prev.verticalCenter
    text-align: center
    text: Item de Cura  
    margin-left: 2

  BotLabel
    id: distText
    anchors.top: itemId.verticalCenter
    anchors.left: itemId.right
    anchors.right: parent.right
    anchors.bottom: itemId.bottom
    text-align: center
    text: Max Distance

  HorizontalScrollBar
    id: Distance
    anchors.left: parent.left
    anchors.top: itemId.bottom
    anchors.right: parent.right
    margin-top: 3
    minimum: 1
    maximum: 10
    step: 1  

  BotLabel
    id: manaInfo
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: Distance.bottom
    text-align: center
    margin-top: 15

  HorizontalScrollBar
    id: minMana
    anchors.left: spellName.left
    anchors.right: spellName.right
    anchors.top: manaInfo.bottom
    margin-top: 2
    minimum: 1
    maximum: 100
    step: 1

  BotLabel
    id: friendHp
    anchors.left: spellName.left
    anchors.right: spellName.right
    anchors.top: prev.bottom
    text-align: center
    margin-top: 10

  HorizontalScrollBar
    id: minFriendHp
    anchors.left: spellName.left
    anchors.right: spellName.right
    anchors.top: friendHp.bottom
    margin-top: 2
    minimum: 1
    maximum: 100
    step: 1   

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8    

  Button
    id: closeButton
    !text: tr('Close')
    font: cipsoftFont
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-top: 15
    margin-right: 5    

]])


function siofriendz(parent)
  if not parent then
    parent = panel
  end
  local panelName = "advancedFriendHealer"
  local ui = setupUI([[
Panel
  height: 19

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 130
    !text: tr('Curar Amigos')

  Button
    id: editList
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: Edite
    color: #00FFFF
    font: verdana-11px-rounded
      
  ]], parent)
  ui:setId(panelName)

  if not storage[panelName] then
    storage[panelName] = {
      minMana = 60,
      minFriendHp = 40,
      spellName = "exura sio",
      spellHeal = true,
      distance = 8,
      itemHeal = true,
      id = 3160
    }
  end


  rootWidget = g_ui.getRootWidget()
  sioListWindow = g_ui.createWidget('SioListWindow', rootWidget)
  sioListWindow:hide()

  ui.title:setOn(storage[panelName].enabled)
  sioListWindow.spell:setOn(storage[panelName].spellHeal)
  sioListWindow.item:setOn(storage[panelName].itemHeal)  

  ui.title.onClick = function(widget)
    storage[panelName].enabled = not storage[panelName].enabled
    widget:setOn(storage[panelName].enabled)
  end

  ui.editList.onClick = function(widget)
    sioListWindow:show()
    sioListWindow:raise()
    sioListWindow:focus()
  end
  sioListWindow.spell.onClick = function(widget)
    storage[panelName].spellHeal = not storage[panelName].spellHeal
    widget:setOn(storage[panelName].spellHeal)
  end
  sioListWindow.item.onClick = function(widget)
    storage[panelName].itemHeal = not storage[panelName].itemHeal
    widget:setOn(storage[panelName].itemHeal)
  end
  sioListWindow.closeButton.onClick = function(widget)
    sioListWindow:hide()
  end
  sioListWindow.spellName.onTextChange = function(widget, text)
    storage[panelName].spellName = text
  end
  local updateMinManaText = function()
    sioListWindow.manaInfo:setText("Minimo de Mana >= " .. storage[panelName].minMana .. "%")
  end
  local updateFriendHpText = function()
    sioListWindow.friendHp:setText("HP do Amigo: " .. storage[panelName].minFriendHp .. "% hp")  
  end
  local updateDistanceText = function()
    sioListWindow.distText:setText("Distancia Maxima: " .. storage[panelName].distance)
  end
  sioListWindow.Distance.onValueChange = function(scroll, value)
    storage[panelName].distance = value
    updateDistanceText()
  end
  updateDistanceText()
  sioListWindow.minMana.onValueChange = function(scroll, value)
    storage[panelName].minMana = value
    updateMinManaText()
  end
  sioListWindow.minFriendHp.onValueChange = function(scroll, value)
    storage[panelName].minFriendHp = value

    updateFriendHpText()
  end
  sioListWindow.itemId:setItemId(storage[panelName].id)
  sioListWindow.itemId.onItemChange = function(widget)
    storage[panelName].id = widget:getItemId()
  end
  sioListWindow.spellName:setText(storage[panelName].spellName)
  sioListWindow.minMana:setValue(storage[panelName].minMana)
  sioListWindow.minFriendHp:setValue(storage[panelName].minFriendHp)
  sioListWindow.Distance:setValue(storage[panelName].distance)

  local healItem
  macro(200, function()
    if storage[panelName].enabled and storage[panelName].spellName:len() > 0 and manapercent() > storage[panelName].minMana then
      for _, spec in ipairs(getSpectators()) do
        if not spec:isLocalPlayer() then
          if spec:isPlayer() and storage[panelName].minFriendHp >= spec:getHealthPercent() and isFriend(spec:getName()) then
            if storage[panelName].spellHeal then
              saySpell(storage[panelName].spellName .. ' "' .. spec:getName(), 100)
              return
            end
            healItem = findItem(storage[panelName].id)
            if storage[panelName].itemHeal and distanceFromPlayer(spec:getPosition()) <= storage[panelName].distance and healItem then
              useWith(storage[panelName].id, spec)
              return
            end
          end
        end
      end
    end
  end)
 end
siofriendz(hpPanel)




        UI.Separator(hpPanel)

g_ui.loadUIFromString([[

PlayerName < Label
  background-color: alpha
  text-offset: 2 0
  focusable: true
  height: 16

  $focus:
    background-color: #00000055

  Button
    id: remove
    !text: tr('x')
    anchors.right: parent.right
    margin-right: 15
    width: 15
    height: 15

PlayerListsWindow < MainWindow
  !text: tr('Lista de Amigos')
  size: 210 350
  @onEscape: self:hide()

  Label
    anchors.left: FriendList.left
    anchors.top: parent.top
    anchors.right: FriendList.right
    text-align: center
    text: Lista de Amigos:
    margin-right: 3 

  TextList
    id: FriendList
    anchors.top: parent.top
    anchors.left: parent.left
    margin-top: 15
    margin-bottom: 5
    margin-right: 3
    padding: 1
    width: 180
    height: 180
    vertical-scrollbar: FriendListScrollBar

  VerticalScrollBar
    id: FriendListScrollBar
    anchors.top: FriendList.top
    anchors.bottom: FriendList.bottom
    anchors.right: FriendList.right
    step: 14
    pixels-scroll: true

  TextEdit
    id: FriendName
    anchors.right: FriendList.right
    anchors.left: FriendList.left
    anchors.top: FriendList.bottom
    margin-right: 3    
    margin-top: 5

  Button
    id: AddFriend
    !text: tr('Adicionar Amigo')
    anchors.right: FriendList.right
    anchors.left: FriendList.left
    anchors.top: prev.bottom
    margin-right: 3    
    margin-top: 3


  BotSwitch
    id: Members
    anchors.left: FriendList.left
    anchors.right: FriendList.right
    anchors.top: FriendList.bottom
    margin-top: 55
    width: 130
    text-align: center
    text: Party Membros       

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8    

  Button
    id: closeButton
    !text: tr('Close')
    font: cipsoftFont
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-top: 15
    margin-right: 5    

]])


function siofriendz2(parent)
  if not parent then
    parent = panel
  end
  local listPanelName = "playerList"
  local ui = setupUI([[
Panel
  height: 18

  Button
    id: editList
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 18
    text: Lista de Amigos
    Font: verdana-11px-rounded
    color: #00FFFF
  ]], parent)
  ui:setId(listPanelName)

  if not storage[listPanelName] then
    storage[listPanelName] = {
      enemyList = {},
      friendList = {},
      blackList = {},
      groupMembers = true,
      outfits = false,
      marks = false
    }
  end
  -- for backward compability
  if not storage[listPanelName].blackList then
    storage[listPanelName].blackList = {}
  end


  rootWidget = g_ui.getRootWidget()
  playerListWindow = g_ui.createWidget('PlayerListsWindow', rootWidget)
  playerListWindow:hide()

  playerListWindow.Members:setOn(storage[listPanelName].groupMembers)
  playerListWindow.Members.onClick = function(widget)
    storage[listPanelName].groupMembers = not storage[listPanelName].groupMembers
    widget:setOn(storage[listPanelName].groupMembers)
  end



  if storage[listPanelName].friendList and #storage[listPanelName].friendList > 0 then
    for _, name in ipairs(storage[listPanelName].friendList) do
      local label = g_ui.createWidget("PlayerName", playerListWindow.FriendList)
      label.remove.onClick = function(widget)
              label:destroy()
        table.removevalue(storage[listPanelName].friendList, label:getText())
      end
      label:setText(name)
    end
  end
 

  playerListWindow.AddFriend.onClick = function(widget)
    local friendName = playerListWindow.FriendName:getText()
    if friendName:len() > 0 and not table.contains(storage[listPanelName].friendList, friendName, true) then
      table.insert(storage[listPanelName].friendList, friendName)
      local label = g_ui.createWidget("PlayerName", playerListWindow.FriendList)
      label.remove.onClick = function(widget)
              label:destroy()
        table.removevalue(storage[listPanelName].friendList, label:getText())
      end
      label:setText(friendName)
      playerListWindow.FriendName:setText('')
    end
  end
  


  ui.editList.onClick = function(widget)
    playerListWindow:show()
    playerListWindow:raise()
    playerListWindow:focus()
  end
  playerListWindow.closeButton.onClick = function(widget)
    playerListWindow:hide()
  end



onCreatureAppear(function(creature)
  if creature:isPlayer() then
  end
end)
end
siofriendz2(hpPanel)












TabBar:addTab("Utilidades", hpPanel6)
        color= UI.Label("by: @war",hpPanel6)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(hpPanel6)
        color= UI.Label("Comidas:",hpPanel6)
color:setColor("green")
color:setFont("verdana-11px-rounded")
Panels.Eating(hpPanel6)
        UI.Separator(hpPanel6)
        color= UI.Label("Stamina:",hpPanel6)
    color:setColor("green")
    color:setFont("verdana-11px-rounded")

function staminaItems(parent)
  if not parent then
    parent = panel
  end
  local panelName = "staminaItemsUser"
  local ui = setupUI([[
Panel
  height: 65
  margin-top: 2

  SmallBotSwitch
    id: title
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center

  HorizontalScrollBar
    id: scroll1
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    anchors.top: title.bottom
    margin-right: 2
    margin-top: 2
    minimum: 0
    maximum: 42
    step: 1
    
  HorizontalScrollBar
    id: scroll2
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: prev.top
    margin-left: 2
    minimum: 0
    maximum: 42
    step: 1    

  ItemsRow
    id: items
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
  ]], parent)
  ui:setId(panelName)

  if not storage[panelName] then
    storage[panelName] = {
      min = 25,
      max = 40,
    }
  end

  local updateText = function()
    ui.title:setText("" .. storage[panelName].min .. " <= stamina >= " .. storage[panelName].max .. "")  
  end
 
  ui.scroll1.onValueChange = function(scroll, value)
    storage[panelName].min = value
    updateText()
  end
  ui.scroll2.onValueChange = function(scroll, value)
    storage[panelName].max = value
    updateText()
  end
 
  ui.scroll1:setValue(storage[panelName].min)
  ui.scroll2:setValue(storage[panelName].max)
 
  ui.title:setOn(storage[panelName].enabled)
  ui.title.onClick = function(widget)
    storage[panelName].enabled = not storage[panelName].enabled
    widget:setOn(storage[panelName].enabled)
  end
 
  if type(storage[panelName].items) ~= 'table' then
    storage[panelName].items = { 11588 }
  end
 
  for i=1,5 do
    ui.items:getChildByIndex(i).onItemChange = function(widget)
      storage[panelName].items[i] = widget:getItemId()
    end
    ui.items:getChildByIndex(i):setItemId(storage[panelName].items[i])    
  end
 
  macro(500, function()
    if not storage[panelName].enabled or stamina() / 60 < storage[panelName].min or stamina() / 60 > storage[panelName].max then
      return
    end
    local candidates = {}
    for i, item in pairs(storage[panelName].items) do
      if item >= 100 then
        table.insert(candidates, item)
      end
    end
    if #candidates == 0 then
      return
    end    
    use(candidates[math.random(1, #candidates)])
  end)
end
staminaItems(hpPanel6)



        UI.Separator(hpPanel6)


        color= UI.Label("Drop itens:",hpPanel6)
color:setColor("green")
color:setFont("verdana-11px-rounded")

if type(storage.dropItems) ~= "table" then
  storage.dropItems = {283, 284, 285}
end

local foodContainer = UI.Container(function(widget, items)
  storage.dropItems = items
end, true, hpPanel6)
foodContainer:setHeight(35)
foodContainer:setItems(storage.dropItems)

macro(1000, "Drop Itens", function()
  if not storage.dropItems[1] then return end
  if TargetBot and TargetBot.isActive() then return end -- pause when attacking
  for _, container in pairs(g_game.getContainers()) do
    for __, item in ipairs(container:getItems()) do
      for i, dropItem in ipairs(storage.dropItems) do
        if item:getId() == dropItem.id then
          if item:isStackable() then
            return g_game.move(item, player:getPosition(), item:getCount())
          else
            return g_game.move(item, player:getPosition(), dropItem.count) -- count is also subtype
          end
        end
      end
    end
  end
end, hpPanel6)









TabBar:addTab("Equip", hpPanel7)
        color= UI.Label("by: @war",hpPanel7)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(hpPanel7)
        color= UI.Label("Equipar:",hpPanel7)
color:setColor("green")
color:setFont("verdana-11px-rounded")
Panels.AutoEquip(hpPanel7)
        UI.Separator(hpPanel7)
Panels.AutoEquip(hpPanel7)
        UI.Separator(hpPanel7)


        UI.Separator(hpPanel7)




function jewelleryEquip(parent)
  if not parent then
    parent = panel
  end
  panelName = "jewelleryEquipper"
  local ui = setupUI([[
Panel
  height: 130
  margin-top: 2

  BotItem
    id: ringId
    anchors.left: parent.left
    anchors.top: parent.top

  SmallBotSwitch
    id: ringSwitch
    anchors.left: ringId.right
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    text: Equipe Anel
    margin-left: 3
    margin-right: 45

  SmallBotSwitch
    id: valueRing
    anchors.left: ringSwitch.right
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    text: Mana
    margin-left: 3
    margin-right: 0  

  BotLabel
    id: ringTitle
    anchors.left: ringId.right
    anchors.right: parent.right
    anchors.top: ringId.verticalCenter
    text-align: center

  HorizontalScrollBar
    id: ringScroll1
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    anchors.top: ringId.bottom
    margin-right: 2
    margin-top: 2
    minimum: 0
    maximum: 100
    step: 1
    
  HorizontalScrollBar
    id: ringScroll2
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: prev.top
    margin-left: 2
    minimum: 0
    maximum: 100
    step: 1
    
  BotItem
    id: ammyId
    anchors.left: parent.left
    anchors.top: ringScroll1.bottom
    margin-top: 5

  SmallBotSwitch
    id: ammySwitch
    anchors.left: ammyId.right
    anchors.right: parent.right
    anchors.top: ringScroll2.bottom
    text-align: center
    text: Equipe Amuleto
    margin-top: 5
    margin-left: 3
    margin-right: 45

  SmallBotSwitch
    id: valueAmmy
    anchors.left: ammySwitch.right
    anchors.right: parent.right
    anchors.top: ringScroll2.bottom
    text-align: center
    text: Mana
    margin-top: 5
    margin-left: 3

  BotLabel
    id: ammyTitle
    anchors.left: ammyId.right
    anchors.right: parent.right
    anchors.top: ammyId.verticalCenter
    text-align: center

  HorizontalScrollBar
    id: ammyScroll1
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    anchors.top: ammyId.bottom
    margin-right: 2
    margin-top: 2
    minimum: 0
    maximum: 100
    step: 1
    
  HorizontalScrollBar
    id: ammyScroll2
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: prev.top
    margin-left: 2
    minimum: 0
    maximum: 100
    step: 1

  Button
    id: resetDefault
    anchors.top: ammyScroll2.bottom
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    margin-top: 8
    margin-left: 2
    text: Reset Default
    
  SmallBotSwitch
    id: pzCheck
    anchors.top: ammyScroll2.bottom
    anchors.left: resetDefault.right
    anchors.bottom: resetDefault.bottom
    anchors.right: parent.right
    margin-top: 8
    margin-right: 2
    margin-left: 1
    text: Ignorar na PZ

  ]], parent)
  ui:setId(panelName)
  if not storage[panelName] or not storage[panelName].ringId or not storage[panelName].ammyId then
    storage[panelName] = {
      pzCheck = true,
      ringSwitch = true,
      ammySwitch = true,
      ringId = 3048,
      ammyId = 3081,
      ringMin = 30,
      ringMax = 80,
      ammyMin = 30,
      ammyMax = 80,
      valueAmmy = false,
      valueRing = false,
      ringValue = "HP",
      ammyValue = "HP"
    }
  end


  ui.ringSwitch:setOn(storage[panelName].ringEnabled)
  ui.ringSwitch.onClick = function(widget)
    storage[panelName].ringEnabled = not storage[panelName].ringEnabled
    widget:setOn(storage[panelName].ringEnabled)
  end
  ui.ammySwitch:setOn(storage[panelName].ammyEnabled)
  ui.ammySwitch.onClick = function(widget)
    storage[panelName].ammyEnabled = not storage[panelName].ammyEnabled
    widget:setOn(storage[panelName].ammyEnabled)
  end
  ui.pzCheck:setOn(storage[panelName].pzCheck)
  ui.pzCheck.onClick = function(widget)
    storage[panelName].pzCheck = not storage[panelName].pzCheck
    widget:setOn(storage[panelName].pzCheck)
  end

  local updateRingText = function()
    ui.ringTitle:setText("" .. storage[panelName].ringMin .. "% <= " .. storage[panelName].ringValue .. " >= " .. storage[panelName].ringMax .. "%")
    ui.ringTitle:setColor("pink")
    ui.ringTitle:setFont("verdana-11px-rounded")
  end
  local updateAmmyText = function()
    ui.ammyTitle:setText("" .. storage[panelName].ammyMin .. "% <= " .. storage[panelName].ammyValue .. " >= " .. storage[panelName].ammyMax .. "%") 
    ui.ammyTitle:setColor("pink")
    ui.ammyTitle:setFont("verdana-11px-rounded")  
  end

  ui.valueRing:setOn(storage[panelName].valueRing)
  ui.valueRing.onClick = function(widget)
    storage[panelName].valueRing = not storage[panelName].valueRing
    widget:setOn(storage[panelName].valueRing)
    if storage[panelName].valueRing then
      storage[panelName].ringValue = "MP"
    else
      storage[panelName].ringValue = "HP"
    end
    updateRingText()
  end
  ui.valueAmmy:setOn(storage[panelName].valueAmmy)
  ui.valueAmmy.onClick = function(widget)
    storage[panelName].valueAmmy = not storage[panelName].valueAmmy
    widget:setOn(storage[panelName].valueAmmy)
    if storage[panelName].valueAmmy then
      storage[panelName].ammyValue = "MP"
    else
      storage[panelName].ammyValue = "HP"
    end
    updateAmmyText()
  end
 
  ui.ringScroll1.onValueChange = function(scroll, value)
    storage[panelName].ringMin = value
    updateRingText()
  end
  ui.ringScroll2.onValueChange = function(scroll, value)
    storage[panelName].ringMax = value
    updateRingText()
  end
  ui.ammyScroll1.onValueChange = function(scroll, value)
    storage[panelName].ammyMin = value
    updateAmmyText()
  end
  ui.ammyScroll2.onValueChange = function(scroll, value)
    storage[panelName].ammyMax = value
    updateAmmyText()
  end  
  ui.ringId.onItemChange = function(widget)
    storage[panelName].ringId = widget:getItemId()
  end
  ui.ammyId.onItemChange = function(widget)
    storage[panelName].ammyId = widget:getItemId()
  end


  ui.ringScroll1:setValue(storage[panelName].ringMin)
  ui.ringScroll2:setValue(storage[panelName].ringMax)
  ui.ammyScroll1:setValue(storage[panelName].ammyMin)
  ui.ammyScroll2:setValue(storage[panelName].ammyMax)  
  ui.ringId:setItemId(storage[panelName].ringId)
  ui.ammyId:setItemId(storage[panelName].ammyId)

  local defaultRing
  local defaultAmmy
  local ringToEquip
  local ammyToEquip


  -- basic ring check
  function defaultRingFind()
    if storage[panelName].ringEnabled then
      if getFinger() and (getFinger():getId() ~= storage[panelName].ringId and getFinger():getId() ~= getActiveItemId(storage[panelName].ringId)) then
        defaultRing = getFinger():getId()
      else
        defaultRing = false
      end
    end
  end
  defaultRingFind()

  -- basic amulet check
  function defaultAmmyFind()
    if storage[panelName].ammyEnabled then
      if getNeck() and (getNeck():getId() ~= storage[panelName].ammyId and getNeck():getId() ~= getActiveItemId(storage[panelName].ammyId)) then
        defaultAmmy = getNeck():getId()
      else
        defaultAmmy = false
      end
    end
  end
  defaultAmmyFind()
  
  ui.resetDefault.onClick = function(widget)
    defaultRingFind()
    defaultAmmyFind()
  end

  macro(20, function()
    ammyToEquip = findItem(storage[panelName].ammyId)
    ringToEquip = findItem(storage[panelName].ringId)

    -- basic conditions to met 
    if not storage[panelName].ringEnabled and not storage[panelName].ammyEnabled then return end
    if not storage[panelName].ringEnabled and storage[panelName].ammyEnabled and not ammyToEquip and (not getNeck() or (getNeck():getId() ~= storage[panelName].ammyId and getNeck():getId() ~= getActiveItemId(storage[panelName].ammyId))) then return end
    if storage[panelName].ringEnabled and not storage[panelName].ammyEnabled and not ringToEquip and (not getFinger() or (getFinger():getId() ~= storage[panelName].ringId and getFinger():getId() ~= getActiveItemId(storage[panelName].ringId))) then return end

    -- ring unequip conditions
    if storage[panelName].ringEnabled and getFinger() and getFinger():getId() == getActiveItemId(storage[panelName].ringId) and ((storage[panelName].pzCheck and isInPz()) or (not storage[panelName].valueRing and hppercent() >= storage[panelName].ringMax) or (storage[panelName].valueRing and manapercent() >= storage[panelName].ringMax)) then
      if defaultRing then
        moveToSlot(findItem(defaultRing), SlotFinger, 1)
      else
        for _,container in pairs(getContainers()) do
          g_game.move(getFinger(), container:getSlotPosition(container:getItemsCount()))
          return
        end
      end
    end

    -- amulet unequip conditions
    if storage[panelName].ammyEnabled and getNeck() and getNeck():getId() == getActiveItemId(storage[panelName].ammyId) and ((storage[panelName].pzCheck and isInPz()) or (not storage[panelName].valueAmmy and hppercent() >= storage[panelName].ammyMax) or (not storage[panelName].valueAmmy and manapercent() >= storage[panelName].ammyMax)) then
      if defaultAmmy then
        moveToSlot(findItem(defaultAmmy), SlotNeck, 1)
      else
        for _,container in pairs(getContainers()) do
          g_game.move(getNeck(), container:getSlotPosition(container:getItemsCount()))
          return
        end
      end
    end

    -- ring equip conditions
    if storage[panelName].ringEnabled and (not getFinger() or getFinger():getId() ~= getActiveItemId(storage[panelName].ringId)) and (not storage[panelName].pzCheck or not isInPz()) and ((not storage[panelName].valueRing and hppercent() <= storage[panelName].ringMin) or (storage[panelName].valueRing and manapercent() <= storage[panelName].ringMin)) then
      moveToSlot(ringToEquip, SlotFinger, 1)
    end
    -- amulet equip conditions
    if storage[panelName].ammyEnabled and (not getNeck() or getNeck():getId() ~= getActiveItemId(storage[panelName].ammyId)) and (not storage[panelName].pzCheck or not isInPz()) and ((not storage[panelName].valueAmmy and hppercent() <= storage[panelName].ammyMin) or (storage[panelName].valueAmmy and manapercent() <= storage[panelName].ammyMin)) then
      moveToSlot(ammyToEquip, SlotNeck, 1)
    end
  end)
  -- end of function
end
jewelleryEquip(hpPanel7)












        color= UI.Label("Trocar arma Distancia / Perto:",hpPanel5)
color:setColor("green")
color:setFont("verdana-11px-rounded")

macro(100, "Trocar arma, Dist/perto", "shift+s", function()
distancia = tonumber(storage.dist)
perto = tonumber(storage.melee)
  if not g_game.isAttacking() then return end
  targett = g_game.getAttackinggCreature()
    if getDistanceBetween(pos(),targett:getPosition())>1 then
        moveToSlot(distancia, SlotLeft)--dist
  else
        moveToSlot(perto, SlotLeft)--melee
    end
end,hpPanel5)

UI.TextEdit(storage.dist or "id", function(widget, text)   
  storage.dist = text
end,hpPanel5)

UI.TextEdit(storage.melee or "id", function(widget, text)   
  storage.melee = text
end,hpPanel5)

        UI.Separator(hpPanel5)
        color= UI.Label("Atacar usando item:",hpPanel5)
        color:setFont("verdana-11px-rounded")
color:setColor("green")

function kill(parent)
  if not parent then
    parent = panel
  end
local panelName = "killSteal"
local ui = setupUI([[
Panel
  height: 50
  margin-top: 2

  BotItem
    id: item
    anchors.top: parent.top
    anchors.left: parent.left
    margin-top: 2
    
  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: item.right
    anchors.bottom: item.verticalCenter
    text-align: center
    !text: tr('Ativar')
    margin-left: 2
    width: 90
  
  Button
    id: Target
    anchors.top: item.top
    anchors.left: title.right
    anchors.right: parent.right
    anchors.bottom: item.verticalCenter
    margin-left: 3
    text-align: center
    !text: tr('Trocar')
    color: #00FFFF
    font: verdana-11px-rounded
  
  BotLabel
    id: help
    anchors.top: item.verticalCenter
    anchors.left: item.right
    anchors.right: parent.right
    anchors.bottom: item.bottom
    text-align: center
    margin-left: 2

  HorizontalScrollBar
    id: HP
    anchors.top: item.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    minimum: 1
    maximum: 100
    step: 1
    
]], parent)
ui:setId(panelName)

if not storage[panelName] then
  storage[panelName] = {
      id = 3070,
      title = enabled,
      enabled = false,
      setting = true,
      hp = 20
  }
end

ui.title:setOn(storage[panelName].enabled)
ui.title.onClick = function(widget)
  storage[panelName].enabled = not storage[panelName].enabled
  widget:setOn(storage[panelName].enabled)
end
local updateHpText = function()
    local desc
    if storage[panelName].setting then
        desc = "Target"
    else
        desc = "inimigo"
    end
    ui.help:setText("Se " .. desc .. " Estiver com HP < " .. storage[panelName].hp .. "%")
  ui.help:setColor("#00FFFF")
  ui.help:setFont("verdana-11px-rounded")
end
updateHpText()
ui.HP.onValueChange = function(scroll, value)
  storage[panelName].hp = value
  updateHpText()
end
ui.item:setItemId(storage[panelName].id)
ui.item.onItemChange = function(widget)
  storage[panelName].id = widget:getItemId()
end
ui.HP:setValue(storage[panelName].hp)

ui.Target.onClick = function(widget)
    storage[panelName].setting = not storage[panelName].setting
    updateHpText()
end

macro(200, function()
 if not storage[panelName].enabled then return end

 if storage[panelName].setting then
    if target() and target():canShoot() and target():getHealthPercent() <= storage[panelName].hp then
        useWith(storage[panelName].id, target())
    end
 else
    for _, spec in pairs(getSpectators()) do
        if spec:isPlayer() and spec:canShoot() and isEnemy(spec:getName()) and spec:getHealthPercent() <= storage[panelName].hp then
            useWith(storage[panelName].id, spec)
        end
    end
 end
end)
end
kill(hpPanel5)

end
end


  PainelsWindow.closeButton.onClick = function(widget)
    PainelsWindow:hide()
  end


  
ui.editPainel.onClick = function(widget)
    PainelsWindow:show()
    PainelsWindow:raise()
    PainelsWindow:focus()
  end
  UI.Separator()









------------------------------------------------------------------- TIME SPELL ------------------------------------------------------------------------------------------------


g_ui.loadUIFromString([[


tsPanel < Panel
  margin: 5
  margin-bottom: 17
  layout:
    type: verticalBox

timeSpellWindow < MainWindow
  !text: tr('- TIME SPELL -')
  font: verdana-11px-rounded
  color: pink
  size: 215 310
  @onEscape: self:hide()

  TabBar
    id: tmsTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right


  Panel
    id: timeSpellImagem
    anchors.top: tmsTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-border: 5





  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5


]])

local timespellPanelName = "listt"
  local ui = setupUI([[
Panel

  height: 30

  Button
    id: editTime
    color: red
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 30
    text: - Time Spell -

  ]], parent)
  ui:setId(timespellPanelName)

  if not storage[timespellPanelName] then
    storage[timespellPanelName] = { 

    }
  end

rootWidget = g_ui.getRootWidget()
if rootWidget then
    TimeSpellWindow = UI.createWidget('timeSpellWindow', rootWidget)
    TimeSpellWindow:hide()
    TabBar3 = TimeSpellWindow.tmsTabBar
    TabBar3:setContentWidget(TimeSpellWindow.timeSpellImagem)
   for v = 1, 1 do





tmsPanel = g_ui.createWidget("tsPanel") -- Creates Panel
tmsPanel:setId("panelButtons") -- sets ID

tmsPanel2 = g_ui.createWidget("tsPanel") -- Creates Panel
tmsPanel2:setId("2") -- sets ID

tmsPanel3 = g_ui.createWidget("tsPanel") -- Creates Panel
tmsPanel:setId("panelButtons") -- sets ID

tmsPanel4 = g_ui.createWidget("tsPanel") -- Creates Panel
tmsPanel:setId("panelButtons") -- sets ID

tmsPanel5 = g_ui.createWidget("tsPanel") -- Creates Panel
tmsPanel:setId("panelButtons") -- sets ID

tmsPanel6 = g_ui.createWidget("tsPanel") -- Creates Panel
tmsPanel:setId("panelButtons") -- sets ID

tmsPanel7 = g_ui.createWidget("tsPanel") -- Creates Panel
tmsPanel:setId("panelButtons") -- sets ID

TabBar3:addTab("              Time Spell               ", tmsPanel)
        color= UI.Label("by: @war",tmsPanel)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(tmsPanel)




g_ui.loadUIFromString([[


windowUI < MainWindow
  !text: tr('Time Spell')
  font: verdana-11px-rounded
  color: pink
  size: 700 312
  
  Panel
    id: MainPanel
    image-source: /images/ui/panel_flat
    anchors.top: parent.top
    anchors.left: parent.left
    image-border: 6
    padding: 3
    size: 672 225

    
    TextList
      id: spellList
      anchors.left: parent.left
      anchors.bottom: parent.bottom
      padding: 1
      size: 400 212    
      margin-bottom: 3
      margin-left: 3
      vertical-scrollbar: spellListScrollBar
      
    VerticalScrollBar
      id: spellListScrollBar
      anchors.top: spellList.top
      anchors.bottom: spellList.bottom
      anchors.right: spellList.right
      step: 14
      pixels-scroll: true

    Label
      id: spellNameLabel
      anchors.left: spellList.right
      anchors.top: spellList.top
      text: Nome da magia:
      font: verdana-11px-rounded
      color: green
      margin-top: 10
      margin-left: 7

    TextEdit
      id: spellName
      anchors.left: spellNameLabel.right
      anchors.top: parent.top
      margin-top: 5
      margin-left: 12
      width: 145

    Label
      id: onScreenLabel
      anchors.left: spellNameLabel.left
      anchors.top: spellName.bottom
      margin-top: 10
      font: verdana-11px-rounded
      color: green
      text: Texto:

    TextEdit
      id: onScreen
      anchors.left: onScreenLabel.right
      anchors.top: prev.top
      margin-top: -5
      margin-left: 65
      width: 145

    Label
      id: activeTimeLabel
      anchors.left: onScreenLabel.left
      anchors.top: onScreen.bottom
      text: Tempo Ativo:
      font: verdana-11px-rounded
      color: green
      margin-top: 10

    TextEdit
      id: activeTime
      anchors.left: activeTimeLabel.right
      anchors.top: prev.top
      margin-top: -5
      margin-left: 27
      width: 145

    Label
      id: totalTimeLabel
      anchors.left: activeTimeLabel.left
      anchors.top: activeTime.bottom
      text: Tempo:
      margin-top: 10
      font: verdana-11px-rounded
      color: green

    TextEdit
      id: totalTime
      anchors.left: totalTimeLabel.right
      anchors.top: prev.top
      margin-top: -5
      margin-left: 63
      width: 145

    Label
      id: posXLabel
      anchors.left: totalTimeLabel.left
      anchors.top: totalTime.bottom
      text: X:
      font: verdana-11px-rounded
      color: green
      margin-top: 10

    TextEdit
      id: posX
      anchors.left: posXLabel.right
      anchors.top: prev.top
      margin-top: -5
      margin-left: 95
      width: 45

    Label
      id: posYLabel
      anchors.left: posX.right
      anchors.top: posX.top
      text: Y:
      font: verdana-11px-rounded
      color: green
      margin-top: 5
      margin-left: 25

    TextEdit
      id: posY
      anchors.left: posYLabel.right
      anchors.top: prev.top
      margin-top: -5
      margin-left: 21
      width: 45

    Button
      id: addSpell
      anchors.left: spellList.right
      anchors.bottom: parent.bottom
      margin-bottom: 17
      margin-left: 35
      text: Adicionar
      color: yellow
      size: 200 30
      font: verdana-11px-rounded




  HorizontalSeparator
    anchors.left: prev.left
    anchors.top: prev.bottom  
    anchors.right: prev.right
    margin-top: 5
    margin-left: 10

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8

  Label
    id: fdp
    anchors.right: prev.left
    anchors.bottom: parent.bottom
    margin-right: -390
    text: @war
    width: 70
    font: terminus-14px-bold
    color: orange

  Button
    id: dicatime
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-top: 16
    margin-right: 85
    font: verdana-11px-rounded
    text: Dica
    color: #00FFFF
    !tooltip: tr('Clica em mim por favor :D')  

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-top: 15
    margin-right: 5



]])













timeSpellPanelName = "timespellbot"
local ui = setupUI([[
Panel
  height: 100
  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 175
    margin-top: 30
    !text: tr('Ativar')

  Button
    id: settings
    color: pink
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 30
    text: Configuracao

]], tmsPanel)
ui:setId(timeSpellPanelName);

local configName = modules.game_bot.contentsPanel.config:getCurrentOption().text;
TimeSpellConfig = {
    spells = {},
};

rootWidget = g_ui.getRootWidget()
if rootWidget then
  windowUI = UI.createWidget('windowUI', rootWidget)
  windowUI:hide()
  end

onKeyPress(function(keys)
if keys == 'Escape' then
  windowUI:hide()
end
end)

local spellsWidgets = {};

local timeSpellFile = "/bot/" .. configName .. "/TimeSpell/".. name() .. "_TimeSpell.json";
local MainPanel = windowUI.MainPanel;

local editActiveTime = nil;
local editTotalTime = nil;

if g_resources.fileExists(timeSpellFile) then
    local status, result = pcall(function() 
      return json.decode(g_resources.readFileContents(timeSpellFile)) 
    end)
    if not status then
      return onError("Erro carregando arquivo (" .. timeSpellFile .. "). Para consertar o problema, exclua TimeSpell.json. Detalhes: " .. result)
    end
    TimeSpellConfig = result
    if (type(TimeSpellConfig.spells) ~= 'table') then
        TimeSpellConfig.spells = {};
    end

    for i, object in pairs(TimeSpellConfig.spells) do
        if (object.totalCd - now > object.totalTime) then
            TimeSpellConfig.spells[i].totalCd = 0;
            TimeSpellConfig.spells[i].activeCd = 0;
        end
    end
end

function timeSpellConfigSave()
    local configFile =  timeSpellFile;

    local status, result = pcall(function() 
        return json.encode(TimeSpellConfig, 2) 
    end);

    if not status then
        return onError("Erro salvando configuração. Detalhes: " .. result);
    end
      
    if result:len() > 100 * 1024 * 1024 then
        return onError("Arquivo de configuração acima de 100MB, não será salvo.");
    end

    g_resources.writeFileContents(timeSpellFile, result);
end

ui.title:setOn(TimeSpellConfig.enabled);
ui.title.onClick = function(widget)
    TimeSpellConfig.enabled = not TimeSpellConfig.enabled;
    widget:setOn(TimeSpellConfig.enabled);

    timeSpellConfigSave();

    if (not TimeSpellConfig.enabled) then
        for i, widget in pairs(spellsWidgets) do
            if (widget ~= nil) then
                spellsWidgets[i]:destroy();
                spellsWidgets[i] = nil;
            end
        end
    end
end
ui.settings.onClick = function(widget)
    windowUI:show();
    windowUI:raise();
    windowUI:focus();
end

windowUI.closeButton.onClick = function(widget)
    windowUI:hide();
    timeSpellConfigSave();
end

windowUI.dicatime.onClick = function(widget)
modules.corelib.displayInfoBox(tr("Se liga nessa dica doido"), "#Voce pode mover o time spell segurando ctrl e arrastando com o mouse, igual mover um icone :D\n#Voce consegue editar um time dando double click no sobre ele\n@war")
end

local destroySpellWidget = function(key)
    spellsWidgets[key]:destroy();
    spellsWidgets[key] = nil;
end

local refreshSpells = function()
    if TimeSpellConfig.spells then
      for i, child in pairs(MainPanel.spellList:getChildren()) do
        child:destroy();
      end
      for _, entry in pairs(TimeSpellConfig.spells) do
        local label = UI.createWidget('SpellEntry', MainPanel.spellList);
        label.onDoubleClick = function(widget)
            local spellTable = entry;
            TimeSpellConfig.spells[entry.spell] = nil;
            if (spellsWidgets[spellTable.spell] ~= nil) then
                spellsWidgets[spellTable.spell]:destroy();
                spellsWidgets[spellTable.spell] = nil;
            end
            MainPanel.spellName:setText(spellTable.spell);
            MainPanel.onScreen:setText(spellTable.onScreen);
            MainPanel.activeTime:setText(spellTable.activeTime);
            MainPanel.totalTime:setText(spellTable.totalTime);
            MainPanel.posX:setText(spellTable.x);
            MainPanel.posY:setText(spellTable.y);
            label:destroy();
        end
        label.enabled:setChecked(entry.enabled);
        label.enabled.onClick = function(widget)
          entry.enabled = not entry.enabled;
          label.enabled:setChecked(entry.enabled);
        end
        label.remove.onClick = function(widget)
          TimeSpellConfig.spells[entry.spell] = nil;
                    label:destroy();
                              destroySpellWidget(entry.spell);
          reindexTable(TimeSpellConfig.spells)
        end
        label:setColoredText({'[', "white", entry.onScreen, "red", ']  ', "white", entry.spell, "#00FFFF", '   Cooldown:   ', "white", entry.totalTime / 1000, "red",'s', "white",'   Ativo:   ', "white", entry.activeTime / 1000, "yellow",'s', "white"});
        label:setFont("verdana-11px-rounded")
      end
    end
end

refreshSpells();

MainPanel.addSpell.onClick = function(widget)

    local spellName = MainPanel.spellName:getText():trim():lower();
    local onScreenName = MainPanel.onScreen:getText():trim();
    local activeTime = tonumber(MainPanel.activeTime:getText()) or 0;
    local totalTime = tonumber(MainPanel.totalTime:getText());
    local posX = tonumber(MainPanel.posX:getText()) or 0;
    local posY = tonumber(MainPanel.posY:getText()) or 39;

    if (not totalTime) then
        return warn('TimeSpell: Digite um cooldown valido.');
    end

    if (not posX) then
        return warn('TimeSpell: Digite uma posicao X valida.');
    end

    if (not posY) then
        return warn('TimeSpell: Digite uma posicao Y valida.');
    end

    if (spellName:len() == 0) then
        return warn('TimeSpell: Digite uma spell valido.');
    end

    if (onScreenName:len() == 0) then
        return warn('TimeSpell: Coloque um nome em Texto.');
    end

    -- table.insert(TimeSpellConfig.spells, { 
    --   index = #TimeSpellConfig.spells+1, 
    --   spell = spellName, 
    --   onScreen = onScreenName, 
    --   activeTime = activeTime,
    --   activeCd = 0,
    --   totalTime = totalTime,
    --   totalCd = 0,
    --   x = posX,
    --   y = posY,
    --   enabled = true,
    -- });

    TimeSpellConfig.spells[spellName] = { 
      index = #TimeSpellConfig.spells+1, 
      spell = spellName, 
      onScreen = onScreenName, 
      activeTime = activeTime,
      activeCd = 0,
      totalTime = totalTime,
      totalCd = 0,
      x = posX,
      y = posY,
      enabled = true,
    };

    MainPanel.spellName:setText('');
    MainPanel.onScreen:setText('');
    MainPanel.activeTime:setText('');
    MainPanel.totalTime:setText('');
    MainPanel.posX:setText('');
    MainPanel.posY:setText('');
    refreshSpells();
end

local spellWidget = [[
UIWidget
  background-color: #1C1C1C
  opacity: 0.8
  padding: 0 13
  focusable: true
  phantom: false
  draggable: true
]],modules.game_interface.getMapPanel();

local function formatRemainingTime(time)
    local remainingTime = (time - now) / 1000;
    local timeText = '';
    timeText = string.format("%.0f", (time - now) / 1000).. "s";
    return timeText;
end


local function attachSpellWidgetCallbacks(key)
    spellsWidgets[key].onDragEnter = function(widget, mousePos)
        if not modules.corelib.g_keyboard.isCtrlPressed() then
          return false
        end
        widget:breakAnchors()
        widget.movingReference = { x = mousePos.x - widget:getX(), y = mousePos.y - widget:getY() }
        return true
    end
  
    spellsWidgets[key].onDragMove = function(widget, mousePos, moved)
        local parentRect = widget:getParent():getRect()
        local x = math.min(math.max(parentRect.x, mousePos.x - widget.movingReference.x), parentRect.x + parentRect.width - widget:getWidth())
        local y = math.min(math.max(parentRect.y - widget:getParent():getMarginTop(), mousePos.y - widget.movingReference.y), parentRect.y + parentRect.height - widget:getHeight())        
        widget:move(x, y)
        return true
    end
  
    spellsWidgets[key].onDragLeave = function(widget, pos)
      TimeSpellConfig.spells[key].x = widget:getX();
      TimeSpellConfig.spells[key].y = widget:getY();
      timeSpellConfigSave();
      return true
    end
end

local TimeSpellMacro = macro(100, function() 
    if (not ui.title:isOn()) then return; end

    for index, object in pairs(TimeSpellConfig.spells) do
      if (not object.enabled and spellsWidgets[object.spell] ~= nil) then
          spellsWidgets[object.spell]:destroy();
          spellsWidgets[object.spell] = nil;
      elseif (object.enabled) then
          if (spellsWidgets[object.spell] == nil) then
              spellsWidgets[object.spell] = setupUI(spellWidget, modules.game_interface.getMapPanel());
              spellsWidgets[object.spell]:setPosition({ x = object.x, y = object.y })
              attachSpellWidgetCallbacks(object.spell);
          end
          
          if (not object.totalCd or object.totalCd < now) then
              spellsWidgets[object.spell]:setText(object.onScreen);
              spellsWidgets[object.spell]:setColor('green');
          elseif (object.activeCd >= now) then
              spellsWidgets[object.spell]:setColor('yellow');
              local timeText = formatRemainingTime(object.activeCd);
              spellsWidgets[object.spell]:setText(object.onScreen .. ': ' .. timeText);
          else
              spellsWidgets[object.spell]:setColor('red');
              local timeText = formatRemainingTime(object.totalCd);
              spellsWidgets[object.spell]:setText(object.onScreen .. ': ' .. timeText);
          end
      end
    end
end);


onTalk(function(name, level, mode, text, channelId, pos)
    if (name ~= player:getName()) then return; end

    text = text:lower();
    if (TimeSpellConfig.spells[text] == nil) then return; end
    if (TimeSpellConfig.spells[text].activeTime > 0) then
        TimeSpellConfig.spells[text].activeCd = now + TimeSpellConfig.spells[text].activeTime;
    end
    TimeSpellConfig.spells[text].totalCd = now + TimeSpellConfig.spells[text].totalTime;
    timeSpellConfigSave();
end);




end
end


  TimeSpellWindow.closeButton.onClick = function(widget)
    TimeSpellWindow:hide()
  end


  
ui.editTime.onClick = function(widget)
    TimeSpellWindow:show()
    TimeSpellWindow:raise()
    TimeSpellWindow:focus()
  end
 UI.Separator()












------------------------------------------------------------------------ CRONOMETRO ------------------------------------------------------------------------

g_ui.loadUIFromString([[



croPanel < Panel
  margin: 5
  margin-bottom: 17
  layout:
    type: verticalBox

cronometroWindow < MainWindow
  !text: tr('- CRONOMETRO -')
  font: verdana-11px-rounded
  color: pink
  size: 200 300
  @onEscape: self:hide()

  TabBar
    id: croTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 0


  Panel
    id: cronometroImagem
    anchors.top: croTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-border: 9





  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5     




  ]])









local cronometroPanelName = "listt"
  local ui = setupUI([[
Panel


  height: 30

  Button
    id: editCronometro
    color: blue
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 30
    text: - Cronometro -

  ]], parent)
  ui:setId(cronometroPanelName)

  if not storage[cronometroPanelName] then
    storage[cronometroPanelName] = { 

    }
  end

rootWidget = g_ui.getRootWidget()
if rootWidget then
    cronometrosWindow = UI.createWidget('cronometroWindow', rootWidget)
    cronometrosWindow:hide()
    TabBar3 = cronometrosWindow.croTabBar
    TabBar3:setContentWidget(cronometrosWindow.cronometroImagem)
   for v = 1, 1 do





croPanel = g_ui.createWidget("croPanel") -- Creates Panel
croPanel:setId("panelButtons") -- sets ID

croPanel2 = g_ui.createWidget("croPanel") -- Creates Panel
croPanel2:setId("2") -- sets ID

croPanel3 = g_ui.createWidget("croPanel") -- Creates Panel
croPanel:setId("panelButtons") -- sets ID

croPanel4 = g_ui.createWidget("croPanel") -- Creates Panel
croPanel:setId("panelButtons") -- sets ID

croPanel5 = g_ui.createWidget("croPanel") -- Creates Panel
croPanel:setId("panelButtons") -- sets ID

croPanel6 = g_ui.createWidget("croPanel") -- Creates Panel
croPanel:setId("panelButtons") -- sets ID

TabBar3:addTab("            Cronometro          ", croPanel)
        color= UI.Label("by: @war",croPanel)
        color:setFont("verdana-11px-rounded")
color:setColor("orange")
        UI.Separator(croPanel)







end
end


  cronometrosWindow.closeButton.onClick = function(widget)
    cronometrosWindow:hide()
  end


  
ui.editCronometro.onClick = function(widget)
    cronometrosWindow:show()
    cronometrosWindow:raise()
    cronometrosWindow:focus()
  end

UI.Separator()




------------------------------------------------------------------------ MUSICAS ------------------------------------------------------------------------

g_ui.loadUIFromString([[


MusicaWindow < MainWindow
  !text: tr('Musicas\n\n @war ')
  font: verdana-11px-rounded
  size: 440 360
  padding: 25
  color: green
  @onEscape: self:hide()

  Button
    id: stopp
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-top: 16
    margin-right: 139
    font: verdana-11px-rounded
    text: Stop
    color: green
    !tooltip: tr('Use fones de ouvido para ter uma experiencia melhor.')  

  BotSwitch
    id: balada
    width: 100
    anchors.bottom: stopp.top
    anchors.right: stopp.right
    anchors.right: parent.horizontalCenter
    margin-right: 80
    margin-bottom: -20
    text: Modo Balada
    !tooltip: tr('heheh')

  Label
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    font: verdana-11px-rounded

    anchors.top: parent.top
    text-align: center
    margin-top: 4
    text: < Playlist: > 
    color: yellow

  Label
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    margin-top: 4
    font: verdana-11px-rounded
    text: < Playlist 2: >
    color: yellow


  VerticalScrollBar
    id: contentScroll
    anchors.top: prev.bottom
    margin-top: 3
    anchors.right: parent.right
    anchors.bottom: separator.top
    step: 28
    pixels-scroll: true
    margin-right: 190
    margin-top: 13
    margin-bottom: 16

  ScrollablePanel
    id: content
    anchors.top: prev.top
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: separator.top
    vertical-scrollbar: contentScroll
    margin-bottom: 15
      
    Panel
      id: left
      anchors.top: parent.top
      anchors.left: parent.left
      anchors.right: parent.horizontalCenter
      margin-top: 5
      margin-left: 10
      margin-right: 10
      layout:
        type: verticalBox
        fit-children: true
      focusable: false

    Panel
      id: right
      anchors.top: parent.top
      anchors.left: parent.horizontalCenter
      anchors.right: parent.right
      margin-top: 5
      margin-left: 10
      margin-right: 10
      layout:
        type: verticalBox
        fit-children: true
      focusable: false


  HorizontalSeparator
    id: separator
    height: 16
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 8

  ResizeBorder
    id: bottomResizeBorder
    anchors.fill: separator
    height: 3
    minimum: 260
    maximum: 600
    margin-left: 3
    margin-right: 3
    background: #ffffff88   

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 16
    margin-right: 5
    margin-bottom: 0 

  ]])




local panelName = "musicas"
local ui = setupUI([[
Panel

  height: 30

  Button
    id: editMusica
    font: verdana-11px-rounded
    color: #00FFFF
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 30
    text: - Musicas -

  ]], parent)
  ui:setId(PanelName)

if not storage[panelName] then
  storage[panelName] = {
}
end

local settings = storage[panelName]

musicaWindow = UI.createWindow('MusicaWindow', rootWidget)
musicaWindow:hide()

modules.game_interface.addMenuHook("category", "Musicas",
  function()
          musicaWindow:show()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)

local configur = storage[panelName]
  musicaWindow.balada:setOn(configur.balada)
  musicaWindow.balada.onClick = function(widget)
    configur.balada = not configur.balada
    widget:setOn(configur.balada)
  end

musicaWindow.closeButton.onClick = function(widget)
  musicaWindow:hide()
end





-- available options for dest param
local rightPanel = musicaWindow.content.right
local leftPanel = musicaWindow.content.left


ui.editMusica.onClick = function(widget)
  musicaWindow:show()
  musicaWindow:raise()
  musicaWindow:focus()
end


local baladaa = modules.game_interface.getMapPanel()
macro(1000, function()
  if configur.balada then
baladaa:setShader("outfit_rainbow")
end
if not configur.balada then
  baladaa:setShader("")
end
end)



UI.Button("Musica 1", function()
playSound("/Som/travis.ogg")
end,rightPanel)

UI.Button("Musica 2", function()
playSound("/Som/funksid.ogg")
end,rightPanel)


UI.Button("Musica 3", function()
playSound("/Som/imaginando.ogg")
end,rightPanel)

UI.Button("Musica 4", function()
playSound("/Som/liluzi.ogg")
end,rightPanel)

UI.Button("Musica 5", function()
playSound("/Som/mamonas.ogg")
end,rightPanel)

UI.Button("Musica 6", function()
playSound("/Som/money.ogg")
end,rightPanel)

UI.Button("Musica 7", function()
playSound("/Som/paparazi.ogg")
end,rightPanel)


UI.Button("Musica 8", function()
playSound("/Som/suicide.ogg")
end,rightPanel)

UI.Button("Musica 9", function()
playSound("/Som/hold.ogg")
end,rightPanel)

UI.Button("Musica 10", function()
playSound("/Som/oceans.ogg")
end,rightPanel)

UI.Button("Musica 11", function()
playSound("/Som/3.ogg")
end,rightPanel)

UI.Button("Musica 12", function()
playSound("/Som/kingston.ogg")
end,rightPanel)

UI.Button("Musica 13", function()
playSound("/Som/floor.ogg")
end,rightPanel)

UI.Button("Musica 14", function()
playSound("/Som/drive.ogg")
end,rightPanel)

UI.Button("Musica 15", function()
playSound("/Som/bala.ogg")
end,rightPanel)

UI.Button("Musica 16", function()
playSound("/Som/never.ogg")
end,rightPanel)

UI.Button("Musica 17", function()
playSound("/Som/crush.ogg")
end,rightPanel)

UI.Button("Musica 18", function()
playSound("/Som/feliz.ogg")
end,rightPanel)

UI.Button("1 hora de enimen", function()
playSound("/Som/enimen2.ogg")
end,rightPanel)

UI.Button("1 hora de trap", function()
playSound("/Som/1horatrap.ogg")
end,rightPanel)

UI.Button("1 hora de funk", function()
playSound("/Som/1horafunk.ogg")
end,rightPanel)

UI.Button("1 hora de funk remix", function()
playSound("/Som/1horaremix.ogg")
end,rightPanel)

UI.Button("1 hora de Tauz", function()
playSound("/Som/1horatauz.ogg")
end,rightPanel)




UI.Button("Musica 1", function()
playSound("/som/1.ogg")
end,leftPanel)

UI.Button("Musica 2", function()
playSound("/Som/2.ogg")
end,leftPanel)

UI.Button("Musica 3", function()
playSound("/Som/billie.ogg")
end,leftPanel)

UI.Button("Musica 4", function()
playSound("/Som/dead.ogg")
end,leftPanel)

UI.Button("Musica 5", function()
playSound("/Som/dogs.ogg")
end,leftPanel)

UI.Button("Musica 6", function()
playSound("/Som/gang.ogg")
end,leftPanel)

UI.Button("Musica 7", function()
playSound("/Som/havana.ogg")
end,leftPanel)

UI.Button("Musica 8", function()
playSound("/Som/lil.ogg")
end,leftPanel)

UI.Button("Musica 9", function()
playSound("/Som/sadnes.ogg")
end,leftPanel)

UI.Button("Musica 10", function()
playSound("/Som/theory.ogg")
end,leftPanel)

UI.Button("Musica 11", function()
playSound("/Som/umut.ogg")
end,leftPanel)

UI.Button("Musica 12", function()
playSound("/Som/venom.ogg")
end,leftPanel)

UI.Button("Musica 13", function()
playSound("/Som/waka.ogg")
end,leftPanel)

UI.Button("Musica 14", function()
playSound("/Som/week.ogg")
end,leftPanel)

UI.Button("Musica 15", function()
playSound("/Som/50cent.ogg")
end,leftPanel)

UI.Button("Musica 16", function()
playSound("/Som/harris.ogg")
end,leftPanel)

UI.Button("Musica 17", function()
playSound("/Som/deam.ogg")
end,leftPanel)

UI.Button("Musica 18", function()
playSound("/Som/broken.ogg")
end,leftPanel)
  

UI.Button("1 hora de musica triste", function()
playSound("/Som/sadboy.ogg")
end,leftPanel)


UI.Button("1 hora sad", function()
playSound("/Som/1horasad.ogg")
end,leftPanel)

UI.Button("1 hora de musica", function()
playSound("/Som/1hora.ogg")
end,leftPanel)

UI.Button("1 hora de neffex", function()
playSound("/Som/1horaneffex.ogg")
end,leftPanel)

UI.Button("1 hora de link park", function()
playSound("/Som/1horalink.ogg")
end,leftPanel)



musicaWindow.stopp.onClick = function(widget)
playSound("/Som/yamate.ogg")
end





UI.Separator()




------------------------------------------------------------------------ VIAJE ------------------------------------------------------------------------





g_ui.loadUIFromString([[


ViajeWindow < MainWindow
  !text: tr('Viaje')
  font: verdana-11px-rounded
  size: 380 310
  padding: 25
  color: green
  @onEscape: self:hide()

  Button
    id: edite
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-bottom: -5
    margin-right: 115
    font: verdana-11px-rounded
    text: Edite
    color: green
    !tooltip: tr('Configure os nomes das cidades.')

  Label
    id: stoppp
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-bottom: -20
    margin-right: 147
    font: verdana-11px-rounded
    text: @war
    color: red


  Label
    id: stopppp
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-bottom: 20
    margin-right: 100
    font: verdana-11px-rounded
    text: Botao de atalho: Shift+2
    color: pink 

  Label
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    font: verdana-11px-rounded

    anchors.top: parent.top
    text-align: center
    margin-top: 4
    text: < Cidades: > 
    color: yellow

  Label
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    margin-top: 4
    font: verdana-11px-rounded
    text: < Cidades 2: >
    color: yellow


  VerticalScrollBar
    id: contentScroll
    anchors.top: prev.bottom
    margin-top: 3
    anchors.right: parent.right
    anchors.bottom: separator.top
    step: 28
    pixels-scroll: true
    margin-right: -10
    margin-top: 18
    margin-bottom: 16

  ScrollablePanel
    id: content
    anchors.top: prev.top
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: separator.top
    vertical-scrollbar: contentScroll
    margin-bottom: 15
      
    Panel
      id: left
      anchors.top: parent.top
      anchors.left: parent.left
      anchors.right: parent.horizontalCenter
      margin-top: 5
      margin-left: 10
      margin-right: 10
      layout:
        type: verticalBox
        fit-children: true

    Panel
      id: right
      anchors.top: parent.top
      anchors.left: parent.horizontalCenter
      anchors.right: parent.right
      margin-top: 5
      margin-left: 10
      margin-right: 10
      layout:
        type: verticalBox
        fit-children: true


  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top   

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 16
    margin-right: 5
    margin-bottom: 0 




]])



local panelName = "viaje"
local ui = setupUI([[
Panel

  height: 30

  Button
    id: editMusica
    font: verdana-11px-rounded
    color: #4B0082
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 30
    text: - Viaje -

  ]], parent)
  ui:setId(PanelName)




if not storage[panelName] then
  storage[panelName] = {
}
end

local settings = storage[panelName]


viajeWindow = UI.createWindow('ViajeWindow', rootWidget)
viajeWindow:hide()

viajeWindow.closeButton.onClick = function(widget)
  viajeWindow:hide()
end

modules.game_interface.addMenuHook("category", "Viaje",
  function()
          viajeWindow:show()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)

modules.game_interface.addMenuHook("category", "Painel de Magias",
  function()
          say(storage.magiaatalho)
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)



-- available options for dest param
local rightPanel = viajeWindow.content.right
local leftPanel = viajeWindow.content.left

ui.editMusica.onClick = function(widget)
  viajeWindow:show()
  viajeWindow:raise()
  viajeWindow:focus()
end


onKeyPress(function(keys)
if keys == 'Shift+2' then
  viajeWindow:show()
end
end)

UI.Button(storage.cidade1, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade1)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)

UI.Button(storage.cidade2, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade2)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)

UI.Button(storage.cidade3, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade3)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)

UI.Button(storage.cidade4, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade4)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)

UI.Button(storage.cidade5, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade5)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)

UI.Button(storage.cidade6, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade6)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)


UI.Button(storage.cidade7, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade7)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)

UI.Button(storage.cidade8, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade8)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)

UI.Button(storage.cidade9, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidade9)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,leftPanel)



UI.Button(storage.cidades1, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades1)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)

UI.Button(storage.cidades2, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades2)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)

UI.Button(storage.cidades3, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades3)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)

UI.Button(storage.cidades4, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades4)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)

UI.Button(storage.cidades5, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades5)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)

UI.Button(storage.cidades6, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades6)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)


UI.Button(storage.cidades7, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades7)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)

UI.Button(storage.cidades8, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades8)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)

UI.Button(storage.cidades9, function()
NPC.say("hi")
schedule(700, function()
NPC.say(storage.cidades9)
end)
schedule(1200, function()
NPC.say("yes")
end)
end,rightPanel)








------


g_ui.loadUIFromString([[

CidadesWindow < MainWindow
  !text: tr('Cidades')
  font: verdana-11px-rounded
  size: 300 310
  padding: 25
  color: green
  @onEscape: self:hide()


  Label
    id: stoppp
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text-align: center
    margin-bottom: 0
    margin-right: 115
    font: verdana-11px-rounded
    text: @war
    color: red  

  Label
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    font: verdana-11px-rounded

    anchors.top: parent.top
    text-align: center
    margin-top: 4
    text: < Cidades: > 
    color: yellow

  Label
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    margin-top: 4
    font: verdana-11px-rounded
    text: < Cidades 2: >
    color: yellow


  VerticalScrollBar
    id: contentScroll
    anchors.top: prev.bottom
    margin-top: 3
    anchors.right: parent.right
    anchors.bottom: separator.top
    step: 28
    pixels-scroll: true
    margin-right: -10
    margin-top: 13
    margin-bottom: 16

  ScrollablePanel
    id: content
    anchors.top: prev.top
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: separator.top
    vertical-scrollbar: contentScroll
    margin-bottom: 15
      
    Panel
      id: left
      anchors.top: parent.top
      anchors.left: parent.left
      anchors.right: parent.horizontalCenter
      margin-top: 5
      margin-left: 10
      margin-right: 10
      layout:
        type: verticalBox
        fit-children: true

    Panel
      id: right
      anchors.top: parent.top
      anchors.left: parent.horizontalCenter
      anchors.right: parent.right
      margin-top: 5
      margin-left: 10
      margin-right: 10
      layout:
        type: verticalBox
        fit-children: true


  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top   

  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 16
    margin-right: 5
    margin-bottom: 0 


  ]])



  local panelName = "cidade"
local ui = setupUI([[
Panel



  ]], parent)
  ui:setId(PanelName)

if not storage[panelName] then
  storage[panelName] = {
}
end

local settings = storage[panelName]


cidadesWindow = UI.createWindow('CidadesWindow', rootWidget)
cidadesWindow:hide()

cidadesWindow.closeButton.onClick = function(widget)
  cidadesWindow:hide()
end




-- available options for dest param
local rightPanel = cidadesWindow.content.right
local leftPanel = cidadesWindow.content.left

viajeWindow.edite.onClick = function(widget)
  cidadesWindow:show()
  cidadesWindow:raise()
  cidadesWindow:focus()
end





UI.TextEdit(storage.cidade1 or "Cidade 1", function(widget, text)    
  storage.cidade1 = text
end,leftPanel)

UI.TextEdit(storage.cidade2 or "Cidade 2", function(widget, text)    
  storage.cidade2 = text
end,leftPanel)

UI.TextEdit(storage.cidade3 or "Cidade 3", function(widget, text)    
  storage.cidade3 = text
end,leftPanel)

UI.TextEdit(storage.cidade4 or "Cidade 4", function(widget, text)    
  storage.cidade4 = text
end,leftPanel)

UI.TextEdit(storage.cidade5 or "Cidade 5", function(widget, text)    
  storage.cidade5 = text
end,leftPanel)

UI.TextEdit(storage.cidade6 or "Cidade 6", function(widget, text)    
  storage.cidade6 = text
end,leftPanel)

UI.TextEdit(storage.cidade7 or "Cidade 7", function(widget, text)    
  storage.cidade7 = text
end,leftPanel)

UI.TextEdit(storage.cidade8 or "Cidade 8", function(widget, text)    
  storage.cidade8 = text
end,leftPanel)

UI.TextEdit(storage.cidade9 or "Cidade 9", function(widget, text)    
  storage.cidade9 = text
end,leftPanel)



UI.TextEdit(storage.cidades1 or "Cidade 1", function(widget, text)    
  storage.cidades1 = text
end,rightPanel)

UI.TextEdit(storage.cidades2 or "Cidade 2", function(widget, text)    
  storage.cidades2 = text
end,rightPanel)

UI.TextEdit(storage.cidades3 or "Cidade 3", function(widget, text)    
  storage.cidades3 = text
end,rightPanel)

UI.TextEdit(storage.cidades4 or "Cidade 4", function(widget, text)    
  storage.cidades4 = text
end,rightPanel)

UI.TextEdit(storage.cidades5 or "Cidade 5", function(widget, text)    
  storage.cidades5 = text
end,rightPanel)

UI.TextEdit(storage.cidades6 or "Cidade 6", function(widget, text)    
  storage.cidades6 = text
end,rightPanel)

UI.TextEdit(storage.cidades7 or "Cidade 7", function(widget, text)    
  storage.cidades7 = text
end,rightPanel)

UI.TextEdit(storage.cidades8 or "Cidade 8", function(widget, text)    
  storage.cidades8 = text
end,rightPanel)

UI.TextEdit(storage.cidades9 or "Cidade 9", function(widget, text)    
  storage.cidades9 = text
end,rightPanel)



UI.Separator()





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------








sensew = macro(2000, function(isOn)
  for _, spec in ipairs(getSpectators()) do
    if spec:isPlayer() and spec:getName() == sense then
      if sense then
          say('sense "' .. sense )
      end
    end
  end
end)


macro(1, function()
if g_game.isAttacking() and g_game.getAttackinggCreature():isPlayer() then
      sense = g_game.getAttackinggCreature():getName() 
      end
end)

senseicon = addIcon("sensew", {item=2137, text="Sense"}, function(icon, isOn)
sensew.setOn(isOn)
end)


if not storage.timers then  storage.timers = {  time = 1 } end

local widgetTC = setupUI([[
Panel
  size: 14 14
  height:500
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  opacity: 0.87

  Label
    id: lblTimer
    height: 12
    color: green
    anchors.bottom: parent.bottom
    margin-bottom: 285
    font: verdana-11px-rounded
    background-color: #00000090
    opacity: 0.87
    text-auto-resize: true
    !text: tr('Cronometro')

]], modules.game_interface.getMapPanel())
local endTime = 1

local doFormatTime = function(v)
    local hours = string.format("%02.f", math.floor(v / 3600))
    local mins = string.format("%02.f", math.floor(v / 60 - (hours * 60)))
    local seconds = string.format("%02.f", math.floor(math.mod(v, 60)))
    return hours .. ":" .. mins .. ":" .. seconds
end

tmrMacro = macro(1000, "Cronometro", function(widget)
    if os.time() >= endTime then
widgetTC.lblTimer:setText('Cronometro')
        

        -- INSERT YOUR FUNCTIONS HERE
        playSound("/Som/abertura.ogg")
        g_game.talk("Fim do Tempo!")
        -- INSERT YOUR FUNCTIONS HERE

        widget:setOff()
        return
    end
    widgetTC.lblTimer:setText(doFormatTime(os.difftime(endTime, os.time())))
end,croPanel)

UI.TextEdit(storage.timers.time or 1, function(widget, newText)
    storage.timers.time = tonumber(newText)
end,croPanel)
-- Examples
UI.Button("Horas", function()
    endTime = os.time() + storage.timers.time * 3600
    tmrMacro:setOn()
end,croPanel)
UI.Button("Minutos", function()
    endTime = os.time() + storage.timers.time * 60
    tmrMacro:setOn()
end,croPanel)
UI.Button("Segundos", function()
    endTime = os.time() + storage.timers.time
    tmrMacro:setOn()
end,croPanel)
tmrMacro:setOff()





local widget = setupUI([[
Panel
  id: caveinfo
  size: 14 14
  height:500
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  opacity: 0.87
]], modules.game_interface.getMapPanel())

local titlecave1 = g_ui.loadUIFromString([[
Label
  color: white
  background-color: #00000080
  font: verdana-11px-rounded
  anchors.bottom: parent.bottom
  margin-bottom: 345
  text-auto-resize: true
  text-align: center
]], widget)

macro(100, function()
if CaveBot.isOff() then
  titlecave1:setText('Cave: OFF')
  titlecave1:setColor('red')
  end
if CaveBot.isOn() then
  titlecave1:setText('Cave: ON')
  titlecave1:setColor('green')
  end
end)


local widget = setupUI([[
Panel
  size: 14 14
  height:500
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  opacity: 0.87
]], modules.game_interface.getMapPanel())

local titletarget1 = g_ui.loadUIFromString([[
Label
  color: white
  background-color: #00000080
  font: verdana-11px-rounded
  margin-bottom: 330
  anchors.bottom: parent.bottom
  text-auto-resize: true
  text-align: center
]], widget)

macro(100, function()
if TargetBot.isOff() then
  titletarget1:setText('Target: OFF')
  titletarget1:setColor('red')
  end
if TargetBot.isOn() then
  titletarget1:setText('Target: ON')
  titletarget1:setColor('green')
  end
end)



---------------------------------------------- SKILLS -----------------------------------------------------





local skills = setupUI([[
Panel
  size: 14 14
  height:500
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  opacity: 0.87




  Label
    id: skills1
    height: 12
    color: #FF0000
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 260
    opacity: 0.87
    text-auto-resize: true
    text-align: center


  Label
    id: skills3
    height: 12
    color: blue
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 244
    opacity: 0.87
    text-auto-resize: true
    text-align: center



  Label
    id: skills5
    height: 12
    color: #FF0000
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 227
    opacity: 0.87
    text-auto-resize: true
    text-align: center



  Label
    id: skills7
    height: 12
    color: #FF0000
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 210
    opacity: 0.87
    text-auto-resize: true
    text-align: center

  Label
    id: skills9
    height: 12
    color: #FF0000
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 193
    opacity: 0.87
    text-auto-resize: true
    text-align: center

  Label
    id: skills11
    height: 12
    color: #FF0000
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 177
    opacity: 0.87
    text-auto-resize: true
    text-align: center

  Label
    id: skills13
    height: 12
    color: #FF0000
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 160
    opacity: 0.87
    text-auto-resize: true
    text-align: center


  Label
    id: skills15
    height: 12
    color: #FF0000
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 144
    opacity: 0.87
    text-auto-resize: true
    text-align: center




]], modules.game_interface.getMapPanel())

local doFormatTime = function(v)
    local horas = string.format("%02.f", math.floor(v / 60))
    local segundos = string.format("%02.f", math.floor(math.mod(v, 60)))
    return horas .. ":" .. segundos
end

-- skillnews

macro(200, function()
skills.skills1:setColoredText({"~ Level: ", "orange", player:getLevel(), "#808080", " - ", "black", " ( ", "white", " % ", "#C71585", player:getLevelPercent(), "#7FFFD4", " ) ", "white",})
skills.skills3:setColoredText({"~ Magia: ", "orange", player:getMagicLevel(), "#808080", " - ", "black", " ( ", "white", " % ", "#C71585", player:getMagicLevelPercent(), "#7FFFD4", " ) ", "white",})
skills.skills5:setColoredText({"~ Punho: ", "orange", player:getSkillLevel(), "#808080", " - ", "black", " ( ", "white", " % ", "#C71585", player:getSkillLevelPercent(), "#7FFFD4", " ) ", "white",})
skills.skills7:setColoredText({"~ Luva: ", "orange", player:getSkillLevel(1), "#808080", " - ", "black", " ( ", "white", " % ", "#C71585", player:getSkillLevelPercent(1), "#7FFFD4", " ) ", "white",})
skills.skills9:setColoredText({"~ Espada: ", "orange", player:getSkillLevel(2), "#808080", " - ", "black", " ( ", "white", " % ", "#C71585", player:getSkillLevelPercent(2), "#7FFFD4", " ) ", "white",})
skills.skills11:setColoredText({"~ Distacia: ", "orange", player:getSkillLevel(4), "#808080", " - ", "black", " ( ", "white", " % ", "#C71585", player:getSkillLevelPercent(4), "#7FFFD4", " ) ", "white",})
skills.skills13:setColoredText({"~ Defesa: ", "orange", player:getSkillLevel(5), "#808080", " - ", "black", " ( ", "white", " % ", "#C71585", player:getSkillLevelPercent(5), "#7FFFD4", " ) ", "white",})
skills.skills15:setColoredText({"~ Stamina: ", "orange", " ( ", "white", doFormatTime(player:getStamina()), "#808080", " ) ", "white", })







if stamina() < 2400 then
skills.skills15:setColor("yellow")
          g_window.setTitle("S T A M I N A    B A I X A ")
end
if stamina() > 2400 then
skills.skills15:setColor("red")
end
end)

macro(5000, function()
if stamina() < 2400 then
warn("Stamina baixa!")
end
end)




------------------------------------------------------------------------------ Configuracao -------------------------------------------------------------------------------------------

g_ui.loadUIFromString([[




configPanel < Panel
  margin: 5
  margin-bottom: 17
  layout:
    type: verticalBox

ConfigWindow < MainWindow
  !text: tr('- Configuracao -')
  font: verdana-11px-rounded
  color: pink
  size: 290 350
  @onEscape: self:hide()

  TabBar
    id: msgsTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 0


  Panel
    id: msgssImagem
    anchors.top: msgsTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-border: 9





  Button
    id: closeButton
    !text: tr('Fechar')
    color: yellow
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 13
    margin-right: 5
    margin-bottom: -5 







  ]])








local configPanelName = "listt"
  local ui = setupUI([[
Panel

  height: 25

  Button
    id: editMsg
    color: #808080
    font: verdana-11px-rounded  
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 25
    text: - Configuracao -

  ]], parent)
  ui:setId(configPanelName)

  if not storage[configPanelName] then
    storage[configPanelName] = { 

    }
  end

rootWidget = g_ui.getRootWidget()
if rootWidget then
    configWindow = UI.createWindow('ConfigWindow', rootWidget)
    configWindow:hide()
    TabBar5 = configWindow.msgsTabBar
    TabBar5:setContentWidget(configWindow.msgssImagem)
   for v = 1, 1 do


  configWindow.closeButton.onClick = function(widget)
    configWindow:hide()
  end

modules.game_interface.addMenuHook("category", "Configuracao",
  function()
          configWindow:show()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)


  
ui.editMsg.onClick = function(widget)
    configWindow:show()
    configWindow:raise()
    configWindow:focus()
  end



configPanel = g_ui.createWidget("configPanel") -- Creates Panel
configPanel:setId("panelButtons") -- sets ID

configPanel2 = g_ui.createWidget("configPanel") -- Creates Panel
configPanel2:setId("panelButtons") -- sets ID

configPanel3 = g_ui.createWidget("configPanel") -- Creates Panel
configPanel3:setId("panelButtons") -- sets ID

configPanel4 = g_ui.createWidget("configPanel") -- Creates Panel
configPanel4:setId("panelButtons") -- sets ID

configPanel5 = g_ui.createWidget("configPanel") -- Creates Panel
configPanel5:setId("panelButtons") -- sets ID

TabBar5:addTab("Config", configPanel)
        color= UI.Label("by: @war",configPanel)
color:setColor("orange")
color:setFont("verdana-11px-rounded")
        UI.Separator(configPanel)

        color= UI.Label("Esconder Icones:",configPanel)
        color:setColor("yellow")
color:setFont("verdana-11px-rounded")



----

local iconbuff = addSwitch("iconbuff", "Icone Buff", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconbuff = widget:isOn()
end, configPanel)
iconbuff:setOn(storage.iconbuff)


macro(200, function()
      if iconbuff:isOn() then
bufficon:hide()
end
if not iconbuff:isOn() then
  bufficon:show()
end
end)

---

local iconbuff2 = addSwitch("iconbuff2", "Icone Combo", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconbuff2 = widget:isOn()
end, configPanel)
iconbuff2:setOn(storage.iconbuff2)


macro(200, function()
      if iconbuff2:isOn() then
comboicone:hide()
end
if not iconbuff2:isOn() then
  comboicone:show()
end
end)

---


local iconbuff3 = addSwitch("iconbuff3", "Icone Up", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconbuff3 = widget:isOn()
end, configPanel)
iconbuff2:setOn(storage.iconbuff3)


macro(200, function()
      if iconbuff3:isOn() then
upicone:hide()
end
if not iconbuff3:isOn() then
  upicone:show()
end
end)

--


local iconbuff4 = addSwitch("iconbuff4", "Icone Sense", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconbuff4 = widget:isOn()
end, configPanel)
iconbuff4:setOn(storage.iconbuff4)


macro(200, function()
      if iconbuff4:isOn() then
senseicon:hide()
end
if not iconbuff4:isOn() then
  senseicon:show()
end
end)




        UI.Separator(configPanel)
        color= UI.Label("Esconder Informacao:",configPanel)
        color:setColor("yellow")
color:setFont("verdana-11px-rounded")

local iconbuff6 = addSwitch("iconbuff6", "Esconder Skills", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconbuff6 = widget:isOn()
end, configPanel)
iconbuff6:setOn(storage.iconbuff6)


macro(200, function()
      if iconbuff6:isOn() then
skills:hide()
end
if not iconbuff6:isOn() then
skills:show()
end
end)


--

local iconhide = addSwitch("iconhide", "Esconder Horas", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide = widget:isOn()
end, configPanel)
iconhide:setOn(storage.iconhide)

if not storage.timers then  storage.timers = {  time = 1 } end
local widgetTCz = setupUI([[
Panel
  size: 14 14
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  margin-bottom: 125
  Label
    id: lblTimer
    color: orange
    font: verdana-11px-rounded
    height: 12
    background-color: #00000040
    opacity: 0.87
    background-color: #00000090
    text-auto-resize: true
    !text: tr('00:00:00 Horas')

]], modules.game_interface.getMapPanel())

macro(400, function(widget)
 if not iconhide:isOn() then
      widgetTCz.lblTimer:setColoredText({"~ " .. modules.game_console.os.date('%H:%M:%S'), "white", })
    end
schedule(300, function()
   if not iconhide:isOn() then
      widgetTCz:show()
    widgetTCz.lblTimer:setColoredText({"~ " .. modules.game_console.os.date('%H:%M:%S'), "orange", })
  end
end)
    schedule(600, function()
       if not iconhide:isOn() then
      widgetTCz.lblTimer:setColoredText({"~ " .. modules.game_console.os.date('%H:%M:%S'), "red", })
    end
    end)
      schedule(900, function()
         if not iconhide:isOn() then
    widgetTCz.lblTimer:setColoredText({"~ " .. modules.game_console.os.date('%H:%M:%S'), "green", })
  end
  end)
    schedule(1300, function()
       if not iconhide:isOn() then
      widgetTCz.lblTimer:setColoredText({"~ " .. modules.game_console.os.date('%H:%M:%S'), "blue", })
    end
    end)
      schedule(1600, function()
         if not iconhide:isOn() then
    widgetTCz.lblTimer:setColoredText({"~ " .. modules.game_console.os.date('%H:%M:%S'), "yellow", })
  end
  end)
      if iconhide:isOn() then
        widgetTCz:hide()
      end
end, configPanel)






local iconhide2 = addSwitch("iconhide2", "Esconder Cronometro", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide2 = widget:isOn()
end, configPanel)
iconhide2:setOn(storage.iconhide2)


macro(200, function()
      if iconhide2:isOn() then
widgetTC:hide()
end
if not iconhide2:isOn() then
widgetTC:show()
end
end)


local iconhide3 = addSwitch("iconhide3", "Esconder Cave/Target", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide3 = widget:isOn()
end, configPanel)
iconhide3:setOn(storage.iconhide3)


macro(200, function()
      if iconhide3:isOn() then
widget:hide()
titlecave1:hide()
end
if not iconhide3:isOn() then
widget:show()
titlecave1:show()
end
end)



local uu = modules.game_bot.botWindow
macro(500, function()
uu:setText("@war")
uu:setColor("pink")
uu:setFont("verdana-11px-rounded")
schedule(600, function()
  uu:setColor("red")
end)
schedule(800, function()
  uu:setColor("yellow")
end)
schedule(1200, function()
  uu:setColor("orange")
end)
schedule(1400, function()
  uu:setColor("#00FFFF")
end)
end)








TabBar5:addTab("Config 2", configPanel2)
        color= UI.Label("by: @war",configPanel2)
color:setColor("orange")
color:setFont("verdana-11px-rounded")
        UI.Separator(configPanel2)


        color= UI.Label("Tecla de atalhos Jump:\nAtivar:",configPanel2)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")


UI.TextEdit(storage.jumpuplocal or "F12", function(widget, text)    
  storage.jumpuplocal = text
end,configPanel2)
        UI.Separator(configPanel2)

        color= UI.Label("Setar Local Jump Up:",configPanel2)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")

UI.TextEdit(storage.jumpuplocal1 or "F10", function(widget, text)    
  storage.jumpuplocal1 = text
end,configPanel2)

        UI.Separator(configPanel2)

        color= UI.Label("Setar Local Jump Down:",configPanel2)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")


UI.TextEdit(storage.jumpuplocal2 or "F11", function(widget, text)    
  storage.jumpuplocal2 = text
end,configPanel2)

        UI.Separator(configPanel2)

        color= UI.Label("Deletar local:",configPanel2)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")


UI.TextEdit(storage.jumpuplocal3 or "Delete", function(widget, text)    
  storage.jumpuplocal3 = text
end,configPanel2)








TabBar5:addTab("Config 3", configPanel3)
        color= UI.Label("by: @war",configPanel3)
color:setColor("orange")
color:setFont("verdana-11px-rounded")
        UI.Separator(configPanel3)

if type(storage.attacked) ~= 'table' or storage.id ~= player:getId() then
 storage.TimeRemain = 0
 storage.attacked = {}
 storage.id = player:getId()
end

onTextMessage(function(mode, text)
 if not text:lower():find('due to your') and not text:lower():find('you deal') then return end
 for _, x in ipairs(getSpectators(posz())) do
  if x:isPlayer() and text:find(x:getName()) then
   for v, u in pairs(storage.attacked) do
    if x:getName() == u.nk then
     table.remove(storage.attacked, v)
    end
   end
   table.insert(storage.attacked, {nk = x:getName(), t = now + 60000, i = x:getId()})
  end
 end
end)

local function doFormatMin(v)
 if v < 1000 then
  return '00:00'
 end
 v = v/1000
 local mins = 00
 local seconds = 00
 if v >= 60 then
  mins = string.format("%02.f", math.floor(v / 60))
 end
 seconds = string.format("%02.f", math.abs(math.floor(math.mod(v, 60))))
 return mins .. ":" .. seconds
end

local widget = setupUI([[
Panel
  size: 14 14
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  margin-bottom: 305
]], modules.game_interface.getMapPanel())

local timepk = g_ui.loadUIFromString([[
Label
  color: white
  font: verdana-11px-rounded
  background-color: #00000040
  opacity: 0.87
  text-auto-resize: true 
]], widget)


macro(1, function()
 for c, q in ipairs(storage.attacked) do
  for _, x in ipairs(getSpectators(true)) do
   if x:isPlayer() and q.nk == x:getName() then
    if x:getHealthPercent() == 0 then
     storage.TimeRemain = now + (storage.pktimee * 60 * 1000)
     table.remove(storage.attacked, c)
    end
   end
   if q.t < now or q.t - now > 60000 or (q.nk == x:getName() and q.i ~= x:getId()) then
    table.remove(storage.attacked, c)
   end
  end
 end
 if storage.TimeRemain < now then
  timepk:setText('PK Time')
  timepk:setColor('#DAA520')
 else
  timepk:setText(doFormatMin(math.abs(now - storage.TimeRemain)))
  timepk:setColor('red')
 end
end)


        color= UI.Label("Time PK:",configPanel3)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")


UI.TextEdit(storage.pktimee or "15", function(widget, text)    
  storage.pktimee = text
end,configPanel3)

local iconhide5 = addSwitch("iconhide5", "Esconder Time PK", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide5 = widget:isOn()
end, configPanel3)
iconhide5:setOn(storage.iconhide5)


macro(200, function()
      if iconhide5:isOn() then
timepk:hide()
end
if not iconhide5:isOn() then
timepk:show()
end
end)




local widget = setupUI([[
Panel
  height: 2000
  width: 2000
]], modules.game_interface.getMapPanel())

local tcLastSense = g_ui.loadUIFromString([[
Label
  color: green
  font: verdana-11px-rounded
  background-color: #00000090
  opacity: 0.87
  text-horizontal-auto-resize: true
  text: Sense  
]], widget)

tcLastSense:setPosition({y = storage.sensex, x =  storage.sensey})

macro(20000, function()
tcLastSense:setText("Sense")
end)

onTextMessage(function(mode, text)
    if mode == 20 then
        local regex = "([a-z A-Z]*) is ([a-z -A-Z]*)to the ([a-z -A-Z]*)."
        local data = regexMatch(text, regex)[1]
        if data and data[2] and data[3] then
            schedule(10, function()
                tcLastSense:setText(text)
            end)
        end
    end
end,scpPanel)

        UI.Separator(configPanel3)

        color= UI.Label("Posicao Sense: \nX:",configPanel3)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")


UI.TextEdit(storage.sensex or "0", function(widget, text)    
  storage.sensex = text
end,configPanel3)

        color= UI.Label("Y:",configPanel3)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")


UI.TextEdit(storage.sensey or "0", function(widget, text)    
  storage.sensey = text
end,configPanel3)


        UI.Separator(configPanel3)

local iconhide4 = addSwitch("iconhide4", "Esconder Sense", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide4 = widget:isOn()
end, configPanel3)
iconhide4:setOn(storage.iconhide4)


macro(200, function()
      if iconhide4:isOn() then
tcLastSense:hide()
end
if not iconhide4:isOn() then
tcLastSense:show()
end
end)

 
local frags = setupUI([[
Panel
  size: 14 14
  height:500
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  opacity: 0.87

  Label
    id: getfragsday
    height: 12
    color: #00FFFF
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 400
    opacity: 0.87
    text-auto-resize: true
    text-align: center

  Label
    id: getfragsweek
    height: 12
    color: #00FFFF
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 385
    opacity: 0.87
    text-auto-resize: true
    text-align: center

  Label
    id: gettask
    height: 12
    color: orange
    font: verdana-11px-rounded
    background-color: #00000090
    anchors.bottom: parent.bottom
    margin-bottom: 370
    opacity: 0.87
    text-auto-resize: true
    text-align: center

]], modules.game_interface.getMapPanel())



onTextMessage(function(mode, text)
if string.find(text, "You currently") then
  local regex = [[have ([0-9]*)]]
   local re = regexMatch(text, regex)
    if #re ~= 0 then
     local n1 = tonumber(re[1][2])
     if n1 then
frags.getfragsday:setText("Frags Diario : " .. n1)
end
end
 end
end)

onTextMessage(function(mode, text)
if string.find(text, "this") then
  local regex = [[week and ([0-9]*)]]
   local re = regexMatch(text, regex)
    if #re ~= 0 then
     local n1 = tonumber(re[1][2])
     if n1 then
frags.getfragsweek:setText("Frags Semanal : " .. n1)
end
end
 end
end)


onTextMessage(function(mode, text)
if string.find(text, "defeated") then
  local regex = [[Total \[([0-9]*)\/([0-9]*)]]
   local re = regexMatch(text, regex)
    if #re ~= 0 then
     local n1, n2 = tonumber(re[1][2]), tonumber(re[1][3])  
     if n1 then
frags.gettask:setText("Task : " .. n1 .. "/" .. n2)
end
end
 end
end)






        color= UI.Label("Frags na tela:",configPanel3)
color:setColor("yellow")
color:setFont("verdana-11px-rounded")

  local fragsz = addSwitch("fragz", "!Frags", function(widget)
    config.fragz = not config.fragz
    widget:setOn(config.fragz)
  end, configPanel3)

  fragsz:setOn(config.fragz)

if config.fragz and player:getBlessings() == 0 then
  say("!frags")
end


onTextMessage(function(mode, text)
if config.fragz and text:lower():find("The murder") then
say("!frags")
end
end)

local iconhide6 = addSwitch("iconhide6", "Esconder Frags", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide6 = widget:isOn()
end, configPanel)
iconhide6:setOn(storage.iconhide6)


macro(200, function()
      if iconhide6:isOn() then
frags:hide()
end
if not iconhide6:isOn() then
frags:show()
end
end)



TabBar5:addTab("Config 4", configPanel4)
        color= UI.Label("by: @war",configPanel4)
color:setColor("orange")
color:setFont("verdana-11px-rounded")
        UI.Separator(configPanel4)

local iconhide7 = addSwitch("iconhide7", "Esconder Painel de bate-papo", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide7 = widget:isOn()
end, configPanel4)
iconhide7:setOn(storage.iconhide7)


macro(200, function()
      if iconhide7:isOn() then
modules.game_console.consolePanel:hide()
end
if not iconhide7:isOn() then
modules.game_console.consolePanel:show()
end
end)


local iconhide8 = addSwitch("iconhide8", "Shader no personagem", function(widget)
    widget:setOn(not widget:isOn())
    storage.iconhide8 = widget:isOn()
end, configPanel4)
iconhide8:setOn(storage.iconhide8)

macro(200, function()
  if iconhide8:isOn() then 
    player:setOutfitShader("outfit_rainbow")
  end
  if not iconhide8:isOn() then

  end
end)

UI.Separator(configPanel4)

        color= UI.Label("Nome do comando de atalho:",configPanel4)
color:setColor("orange")
color:setFont("verdana-11px-rounded")

UI.TextEdit(storage.magiaatalho or "!jutsu", function(widget, text)    
  storage.magiaatalho = text
end,configPanel4)

UI.Separator(configPanel4)

end
end



if not storage.lootluiz then
  storage.lootluiz = {
    trackedLoot = {},
    trackedBoss = {},
    outfits = {},
    customPrices = {},
    lootChannel = true,
    rarityFrames = true,
  }
end



function refreshKills()
    local kills = 0
    for k,v in pairs(killList) do
      kills = kills + 1
      local label = UI.createWidget("ListLabel")
      label:setText(v .. "x " .. k)
    end

    if kills == 0 then
      local label = UI.createWidget("ListLabel")
      label:setText("None")
    end
end

local function add(t, text, color, last)
    table.insert(t, text)
    table.insert(t, color)
    if not last then
        table.insert(t, ", ")
        table.insert(t, "#FFFFFF")
    end
end

local function getColor(v)
    if v >= 10000000 then -- 10kk, red
        return "#FF0000" 
    elseif v >= 5000000 then -- 5kk, orange
        return "#FFA500"
    elseif v >= 1000000 then -- 1kk, yellow
        return "#FFFF00"
    elseif v >= 100000 then -- 100k, purple
        return "#F25AED"
    elseif v >= 10000 then -- 10k, blue
        return "#5F8DF7"
    elseif v >= 1000 then -- 1k, green
        return "#00FF00"
    elseif v >= 50 then
        return "#FFFFFF" -- 50gp, white
    else
      return "#aaaaaa" -- less than 100gp, grey
    end
end


local nameRegex = [[Loot (?:an |a |the |)([^:]+)]]
onTextMessage(function(mode, text)
    if not storage.lootluiz.lootChannel then return end
    if not text:find("Loot ") and not text:find("The following items are available in your reward chest") then return end
    local name

    -- adding monster to killed list
    if text:find("Loot of") then
      name = regexMatch(text, nameRegex)[1][2]
      if not killList[name] then
        killList[name] = 1
      else
        killList[name] = killList[name] + 1
      end
    end
    -- variables
    local split = string.split(text, ":")
    local re = regexMatch(split[2], regex)
    local combinedWorth = 0
    local formatted
    local div
    local t = {}
    local messageT = {}

    -- add timestamp, creature part and color it as white
    add(t, modules.game_console.os.date('%H:%M') .. ' ' .. split[1]..": ", "orange", true)
    add(messageT, split[1].. " : " ,"orange", true) 
    add(messageT, split[2],"green", true)


    -- main part
    if re ~= 0 then
        for i=1,#re do
            local data = re[i][2] -- each looted item
            local formattedLoot = regexMatch(data, [[(^[^(]+)]])[1][1]
            formattedLoot = formattedLoot:trim()
            local amount = getFirstNumberInText(formattedLoot) -- amount found in data
            local price = amount and getPrice(formattedLoot) * amount or getPrice(formattedLoot) -- if amount then multity price, else just take price
            local color = getColor(price) -- generate hex string based off price
            local messageColor = getColor(getPrice(formattedLoot))

            combinedWorth = combinedWorth + price -- add all prices to calculate total worth

            add(t, data, color, i==#re)
            add(messageT, data, color, i==#re)

            --drop tracker
            for i, child in ipairs(dropTrackerWindow.contentsPanel:getChildren()) do
              local childName = child.name
              childName = childName and childName:getText()


              if childName and formattedLoot:find(childName) then
                trackedLoot[tostring(child.item:getItemId())] = trackedLoot[tostring(child.item:getItemId())] + (amount or 1)
                child.drops:setText("Loot Drops: "..trackedLoot[tostring(child.item:getItemId())])

                hightlightText(child.name,"#f0b400", 8)
                modules.game_textmessage.messagesPanel.statusLabel:setVisible(true)
                modules.game_textmessage.messagesPanel.statusLabel:setColoredText({
                  "Valuable loot: ", "red",
                  childName.."", messageColor,
                  " dropped by "..name.."!", "red"
                })
                schedule(3000, function()
                  modules.game_textmessage.messagesPanel.statusLabel:setVisible(false)
                end)
              end
            end
        end
    end

    -- format total worth so it wont look obnoxious
    if combinedWorth >= 1000000 then
        div = combinedWorth/1000000
        formatted = math.floor(div) .. "." .. math.floor(div * 10) % 10 .. "kk"
    elseif combinedWorth >= 1000 then
        div = combinedWorth/1000
        formatted = math.floor(div) .. "." .. math.floor(div * 10) % 10 .. "k"
    else
        formatted = split[2]
    end

    if modules.game_textmessage.messagesPanel.centerTextMessagePanel.highCenterLabel:getText() == text then
                        modules.game_textmessage.messagesPanel.centerTextMessagePanel.highCenterLabel:setMarginBottom("170")
            modules.game_textmessage.messagesPanel.centerTextMessagePanel.highCenterLabel:setColoredText(messageT)
      schedule(math.max(#text * 50, 2000), function() 
        modules.game_textmessage.messagesPanel.centerTextMessagePanel.highCenterLabel:setVisible(false)
      end)
    end

    -- add total worth to string
        add(t, " - (", "#FFFFFF", true)
    add(t, formatted, "green", true)
    add(t, ")", "#FFFFFF", true)
local console = modules.game_console



    -- get/create tab and write raw message
    local tabName = "@war Loot"
    local tab = console.getTab(tabName) or console.addTab(tabName, true)
    console.addText(text, console.SpeakTypesSettings, tabName, "")

    -- find last message in given tab and rewrite it with formatted string
    local panel = console.consoleTabBar:getTabPanel(tab)
    local consoleBuffer = panel:getChildById('consoleBuffer')
    local message = consoleBuffer:getLastChild()
        message:setColoredText(t)

end)


-- tools tab
setDefaultTab("Hotkeys")

-- allows to test/edit bot lua scripts ingame, you can have multiple scripts like this, just change storage.ingame_lua
UI.Button("Hotkeys", function(newText)
  UI.MultilineEditorWindow(storage.ingame_hotkeys or "", {title="Hotkeys editor", description="Adicione suas scripts aqui!\nBy: @war"}, function(text)
    storage.ingame_hotkeys = text
    reload()
  end)
end)



for _, scripts in pairs({storage.ingame_hotkeys}) do
  if type(scripts) == "string" and scripts:len() > 3 then
    local status, result = pcall(function()
      assert(load(scripts, "ingame_editor"))()
    end)
    if not status then 
      error("Hotkeys:\n" .. result)
    end
  end
end

UI.Separator()


playSound("/Som/click.ogg") 







UI.Button("Hotkeys 2", function(newText)
  UI.MultilineEditorWindow(storage.ingame_hotkeys2 or "", {title="Hotkeys editor 2", description="Adicione suas scripts aqui!\nBy: @war"}, function(text)
    storage.ingame_hotkeys2 = text
    reload()
  end)
end)

UI.Separator()

for _, scripts in pairs({storage.ingame_hotkeys2}) do
  if type(scripts) == "string" and scripts:len() > 3 then
    local status, result = pcall(function()
      assert(load(scripts, "ingame_editor"))()
    end)
    if not status then 
      error("Hotkeys 2:\n" .. result)
    end
  end
end 





UI.Separator()
--  UI.Separator() local customPanelName = "Custom"
  local ui = setupUI([[
Panel

  height: 25

  Label
    id: editCustom
    color: red
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 25
    !text: tr('                     Custom 1.9')


  ]], parent)


ui.editCustom.onClick = function(widget)
reload()
end 


  local ui = setupUI([[
Panel

  height: 25

  Label
    id: editCustom2
    color: green
    font: verdana-11px-rounded
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    height: 25
    !text: tr('                         @war')


  ]], parent)


ui.editCustom2.onClick = function(widget)
reload()
end

UI.Separator()




warn("Bem-Vindo a Custom 1.9\nby: @war")
zzf = modules.game_bot.contentsPanel

modules.game_textmessage.displayStatusMessage('@war')

modules.game_textmessage.displayBroadcastMessage('\n\n\n\n\n\n\nBem-Vindo a Custom\n@war')




modules.game_interface.addMenuHook("category", tr("@war"),

  function()
  end,
  function(menuPosition, lookThing, useThing, creatureThing)
    if creatureThing and creatureThing == player then
      return true
    end
    return false
  end
)




